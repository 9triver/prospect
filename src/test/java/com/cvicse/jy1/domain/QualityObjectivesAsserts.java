package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualityObjectivesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityObjectivesAllPropertiesEquals(QualityObjectives expected, QualityObjectives actual) {
        assertQualityObjectivesAutoGeneratedPropertiesEquals(expected, actual);
        assertQualityObjectivesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityObjectivesAllUpdatablePropertiesEquals(QualityObjectives expected, QualityObjectives actual) {
        assertQualityObjectivesUpdatableFieldsEquals(expected, actual);
        assertQualityObjectivesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityObjectivesAutoGeneratedPropertiesEquals(QualityObjectives expected, QualityObjectives actual) {
        assertThat(expected)
            .as("Verify QualityObjectives auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityObjectivesUpdatableFieldsEquals(QualityObjectives expected, QualityObjectives actual) {
        assertThat(expected)
            .as("Verify QualityObjectives relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getObjectiveslevel()).as("check objectiveslevel").isEqualTo(actual.getObjectiveslevel()))
            .satisfies(e -> assertThat(e.getObjectives()).as("check objectives").isEqualTo(actual.getObjectives()))
            .satisfies(e -> assertThat(e.getObjectivesvalue()).as("check objectivesvalue").isEqualTo(actual.getObjectivesvalue()))
            .satisfies(e -> assertThat(e.getCalculationmethod()).as("check calculationmethod").isEqualTo(actual.getCalculationmethod()))
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(e -> assertThat(e.getTakeaction()).as("check takeaction").isEqualTo(actual.getTakeaction()))
            .satisfies(e -> assertThat(e.getNeedresource()).as("check needresource").isEqualTo(actual.getNeedresource()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityObjectivesUpdatableRelationshipsEquals(QualityObjectives expected, QualityObjectives actual) {
        assertThat(expected)
            .as("Verify QualityObjectives relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getQualityReturns()).as("check qualityReturns").isEqualTo(actual.getQualityReturns()))
            .satisfies(e -> assertThat(e.getQualityPlan()).as("check qualityPlan").isEqualTo(actual.getQualityPlan()));
    }
}
