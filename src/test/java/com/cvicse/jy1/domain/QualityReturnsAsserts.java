package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualityReturnsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityReturnsAllPropertiesEquals(QualityReturns expected, QualityReturns actual) {
        assertQualityReturnsAutoGeneratedPropertiesEquals(expected, actual);
        assertQualityReturnsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityReturnsAllUpdatablePropertiesEquals(QualityReturns expected, QualityReturns actual) {
        assertQualityReturnsUpdatableFieldsEquals(expected, actual);
        assertQualityReturnsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityReturnsAutoGeneratedPropertiesEquals(QualityReturns expected, QualityReturns actual) {
        assertThat(expected)
            .as("Verify QualityReturns auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityReturnsUpdatableFieldsEquals(QualityReturns expected, QualityReturns actual) {
        assertThat(expected)
            .as("Verify QualityReturns relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getObjectives()).as("check objectives").isEqualTo(actual.getObjectives()))
            .satisfies(e -> assertThat(e.getQualitytype()).as("check qualitytype").isEqualTo(actual.getQualitytype()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getTarget()).as("check target").isEqualTo(actual.getTarget()))
            .satisfies(e -> assertThat(e.getStatisticalmethod()).as("check statisticalmethod").isEqualTo(actual.getStatisticalmethod()))
            .satisfies(
                e -> assertThat(e.getStatisticalfrequency()).as("check statisticalfrequency").isEqualTo(actual.getStatisticalfrequency())
            )
            .satisfies(e -> assertThat(e.getIstarget()).as("check istarget").isEqualTo(actual.getIstarget()))
            .satisfies(e -> assertThat(e.getProgress()).as("check progress").isEqualTo(actual.getProgress()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getProblems()).as("check problems").isEqualTo(actual.getProblems()))
            .satisfies(
                e -> assertThat(e.getImprovementmeasures()).as("check improvementmeasures").isEqualTo(actual.getImprovementmeasures())
            )
            .satisfies(e -> assertThat(e.getReturntime()).as("check returntime").isEqualTo(actual.getReturntime()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityReturnsUpdatableRelationshipsEquals(QualityReturns expected, QualityReturns actual) {
        assertThat(expected)
            .as("Verify QualityReturns relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getQualityObjectives()).as("check qualityObjectives").isEqualTo(actual.getQualityObjectives()));
    }
}
