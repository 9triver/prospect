package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HrManagementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrManagementAllPropertiesEquals(HrManagement expected, HrManagement actual) {
        assertHrManagementAutoGeneratedPropertiesEquals(expected, actual);
        assertHrManagementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrManagementAllUpdatablePropertiesEquals(HrManagement expected, HrManagement actual) {
        assertHrManagementUpdatableFieldsEquals(expected, actual);
        assertHrManagementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrManagementAutoGeneratedPropertiesEquals(HrManagement expected, HrManagement actual) {
        assertThat(expected)
            .as("Verify HrManagement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrManagementUpdatableFieldsEquals(HrManagement expected, HrManagement actual) {
        assertThat(expected)
            .as("Verify HrManagement relevant properties")
            .satisfies(e -> assertThat(e.getOfficersid()).as("check officersid").isEqualTo(actual.getOfficersid()))
            .satisfies(e -> assertThat(e.getOfficersname()).as("check officersname").isEqualTo(actual.getOfficersname()))
            .satisfies(e -> assertThat(e.getProjectid()).as("check projectid").isEqualTo(actual.getProjectid()))
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getProjectrole()).as("check projectrole").isEqualTo(actual.getProjectrole()))
            .satisfies(e -> assertThat(e.getJobgrade()).as("check jobgrade").isEqualTo(actual.getJobgrade()))
            .satisfies(e -> assertThat(e.getDepartmentid()).as("check departmentid").isEqualTo(actual.getDepartmentid()))
            .satisfies(e -> assertThat(e.getDepartmentname()).as("check departmentname").isEqualTo(actual.getDepartmentname()))
            .satisfies(e -> assertThat(e.getFrontlineid()).as("check frontlineid").isEqualTo(actual.getFrontlineid()))
            .satisfies(e -> assertThat(e.getFrontlinename()).as("check frontlinename").isEqualTo(actual.getFrontlinename()))
            .satisfies(e -> assertThat(e.getJobduty()).as("check jobduty").isEqualTo(actual.getJobduty()))
            .satisfies(e -> assertThat(e.getAnnualworktime()).as("check annualworktime").isEqualTo(actual.getAnnualworktime()))
            .satisfies(e -> assertThat(e.getAnnualtasktarget()).as("check annualtasktarget").isEqualTo(actual.getAnnualtasktarget()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrManagementUpdatableRelationshipsEquals(HrManagement expected, HrManagement actual) {
        assertThat(expected)
            .as("Verify HrManagement relationships")
            .satisfies(e -> assertThat(e.getOfficers()).as("check officers").isEqualTo(actual.getOfficers()));
    }
}
