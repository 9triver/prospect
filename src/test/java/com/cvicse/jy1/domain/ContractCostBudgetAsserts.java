package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ContractCostBudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractCostBudgetAllPropertiesEquals(ContractCostBudget expected, ContractCostBudget actual) {
        assertContractCostBudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertContractCostBudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractCostBudgetAllUpdatablePropertiesEquals(ContractCostBudget expected, ContractCostBudget actual) {
        assertContractCostBudgetUpdatableFieldsEquals(expected, actual);
        assertContractCostBudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractCostBudgetAutoGeneratedPropertiesEquals(ContractCostBudget expected, ContractCostBudget actual) {
        assertThat(expected)
            .as("Verify ContractCostBudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractCostBudgetUpdatableFieldsEquals(ContractCostBudget expected, ContractCostBudget actual) {
        assertThat(expected)
            .as("Verify ContractCostBudget relevant properties")
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getAuxiliaryitem()).as("check auxiliaryitem").isEqualTo(actual.getAuxiliaryitem()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(
                e ->
                    assertThat(e.getUnitprice()).as("check unitprice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUnitprice())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalprice())
                        .as("check totalprice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalprice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractCostBudgetUpdatableRelationshipsEquals(ContractCostBudget expected, ContractCostBudget actual) {
        assertThat(expected)
            .as("Verify ContractCostBudget relationships")
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
