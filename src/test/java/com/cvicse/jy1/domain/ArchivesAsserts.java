package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArchivesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchivesAllPropertiesEquals(Archives expected, Archives actual) {
        assertArchivesAutoGeneratedPropertiesEquals(expected, actual);
        assertArchivesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchivesAllUpdatablePropertiesEquals(Archives expected, Archives actual) {
        assertArchivesUpdatableFieldsEquals(expected, actual);
        assertArchivesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchivesAutoGeneratedPropertiesEquals(Archives expected, Archives actual) {
        assertThat(expected)
            .as("Verify Archives auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchivesUpdatableFieldsEquals(Archives expected, Archives actual) {
        assertThat(expected)
            .as("Verify Archives relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getPage()).as("check page").isEqualTo(actual.getPage()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(
                e -> assertThat(e.getConfidentialityperiod()).as("check confidentialityperiod").isEqualTo(actual.getConfidentialityperiod())
            )
            .satisfies(e -> assertThat(e.getConfidentialnumber()).as("check confidentialnumber").isEqualTo(actual.getConfidentialnumber()))
            .satisfies(e -> assertThat(e.getStorageperiod()).as("check storageperiod").isEqualTo(actual.getStorageperiod()))
            .satisfies(e -> assertThat(e.getPlannumber()).as("check plannumber").isEqualTo(actual.getPlannumber()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getReceivingnumber()).as("check receivingnumber").isEqualTo(actual.getReceivingnumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchivesUpdatableRelationshipsEquals(Archives expected, Archives actual) {
        assertThat(expected)
            .as("Verify Archives relationships")
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()));
    }
}
