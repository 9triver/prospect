package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FundSourceListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundSourceListAllPropertiesEquals(FundSourceList expected, FundSourceList actual) {
        assertFundSourceListAutoGeneratedPropertiesEquals(expected, actual);
        assertFundSourceListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundSourceListAllUpdatablePropertiesEquals(FundSourceList expected, FundSourceList actual) {
        assertFundSourceListUpdatableFieldsEquals(expected, actual);
        assertFundSourceListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundSourceListAutoGeneratedPropertiesEquals(FundSourceList expected, FundSourceList actual) {
        assertThat(expected)
            .as("Verify FundSourceList auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundSourceListUpdatableFieldsEquals(FundSourceList expected, FundSourceList actual) {
        assertThat(expected)
            .as("Verify FundSourceList relevant properties")
            .satisfies(e -> assertThat(e.getPaymentid()).as("check paymentid").isEqualTo(actual.getPaymentid()))
            .satisfies(e -> assertThat(e.getContractcode()).as("check contractcode").isEqualTo(actual.getContractcode()))
            .satisfies(e -> assertThat(e.getContractname()).as("check contractname").isEqualTo(actual.getContractname()))
            .satisfies(
                e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundSourceListUpdatableRelationshipsEquals(FundSourceList expected, FundSourceList actual) {
        assertThat(expected)
            .as("Verify FundSourceList relationships")
            .satisfies(e -> assertThat(e.getTransactionPayment()).as("check transactionPayment").isEqualTo(actual.getTransactionPayment()))
            .satisfies(
                e ->
                    assertThat(e.getSporadicPurchasePayment())
                        .as("check sporadicPurchasePayment")
                        .isEqualTo(actual.getSporadicPurchasePayment())
            )
            .satisfies(e -> assertThat(e.getSharePayment()).as("check sharePayment").isEqualTo(actual.getSharePayment()))
            .satisfies(e -> assertThat(e.getContractPayment()).as("check contractPayment").isEqualTo(actual.getContractPayment()));
    }
}
