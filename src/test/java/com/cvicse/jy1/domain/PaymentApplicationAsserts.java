package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentApplicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentApplicationAllPropertiesEquals(PaymentApplication expected, PaymentApplication actual) {
        assertPaymentApplicationAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentApplicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentApplicationAllUpdatablePropertiesEquals(PaymentApplication expected, PaymentApplication actual) {
        assertPaymentApplicationUpdatableFieldsEquals(expected, actual);
        assertPaymentApplicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentApplicationAutoGeneratedPropertiesEquals(PaymentApplication expected, PaymentApplication actual) {
        assertThat(expected)
            .as("Verify PaymentApplication auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentApplicationUpdatableFieldsEquals(PaymentApplication expected, PaymentApplication actual) {
        assertThat(expected)
            .as("Verify PaymentApplication relevant properties")
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getContractcode()).as("check contractcode").isEqualTo(actual.getContractcode()))
            .satisfies(e -> assertThat(e.getPlanpaymentnode()).as("check planpaymentnode").isEqualTo(actual.getPlanpaymentnode()))
            .satisfies(
                e ->
                    assertThat(e.getPlanpaymentamount())
                        .as("check planpaymentamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPlanpaymentamount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentApplicationUpdatableRelationshipsEquals(PaymentApplication expected, PaymentApplication actual) {
        assertThat(expected)
            .as("Verify PaymentApplication relationships")
            .satisfies(
                e -> assertThat(e.getOutsourcingContract()).as("check outsourcingContract").isEqualTo(actual.getOutsourcingContract())
            );
    }
}
