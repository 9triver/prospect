package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UnQualityAuditAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnQualityAuditAllPropertiesEquals(UnQualityAudit expected, UnQualityAudit actual) {
        assertUnQualityAuditAutoGeneratedPropertiesEquals(expected, actual);
        assertUnQualityAuditAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnQualityAuditAllUpdatablePropertiesEquals(UnQualityAudit expected, UnQualityAudit actual) {
        assertUnQualityAuditUpdatableFieldsEquals(expected, actual);
        assertUnQualityAuditUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnQualityAuditAutoGeneratedPropertiesEquals(UnQualityAudit expected, UnQualityAudit actual) {
        assertThat(expected)
            .as("Verify UnQualityAudit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnQualityAuditUpdatableFieldsEquals(UnQualityAudit expected, UnQualityAudit actual) {
        assertThat(expected)
            .as("Verify UnQualityAudit relevant properties")
            .satisfies(e -> assertThat(e.getUnqualityname()).as("check unqualityname").isEqualTo(actual.getUnqualityname()))
            .satisfies(e -> assertThat(e.getUnqualitytype()).as("check unqualitytype").isEqualTo(actual.getUnqualitytype()))
            .satisfies(e -> assertThat(e.getBelongunitid()).as("check belongunitid").isEqualTo(actual.getBelongunitid()))
            .satisfies(e -> assertThat(e.getBelongunitname()).as("check belongunitname").isEqualTo(actual.getBelongunitname()))
            .satisfies(e -> assertThat(e.getAuditteam()).as("check auditteam").isEqualTo(actual.getAuditteam()))
            .satisfies(e -> assertThat(e.getAuditperson()).as("check auditperson").isEqualTo(actual.getAuditperson()))
            .satisfies(
                e ->
                    assertThat(e.getUnqualitynum())
                        .as("check unqualitynum")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUnqualitynum())
            )
            .satisfies(e -> assertThat(e.getCreatorname()).as("check creatorname").isEqualTo(actual.getCreatorname()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnQualityAuditUpdatableRelationshipsEquals(UnQualityAudit expected, UnQualityAudit actual) {}
}
