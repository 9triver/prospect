package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommunicationRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationRecordAllPropertiesEquals(CommunicationRecord expected, CommunicationRecord actual) {
        assertCommunicationRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertCommunicationRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationRecordAllUpdatablePropertiesEquals(CommunicationRecord expected, CommunicationRecord actual) {
        assertCommunicationRecordUpdatableFieldsEquals(expected, actual);
        assertCommunicationRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationRecordAutoGeneratedPropertiesEquals(CommunicationRecord expected, CommunicationRecord actual) {
        assertThat(expected)
            .as("Verify CommunicationRecord auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationRecordUpdatableFieldsEquals(CommunicationRecord expected, CommunicationRecord actual) {
        assertThat(expected)
            .as("Verify CommunicationRecord relevant properties")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getWbsname()).as("check wbsname").isEqualTo(actual.getWbsname()))
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(
                e ->
                    assertThat(e.getAssociationmeetingname())
                        .as("check associationmeetingname")
                        .isEqualTo(actual.getAssociationmeetingname())
            )
            .satisfies(e -> assertThat(e.getCommunicationtime()).as("check communicationtime").isEqualTo(actual.getCommunicationtime()))
            .satisfies(
                e -> assertThat(e.getCommunicationlocation()).as("check communicationlocation").isEqualTo(actual.getCommunicationlocation())
            )
            .satisfies(
                e -> assertThat(e.getCommunicationcontent()).as("check communicationcontent").isEqualTo(actual.getCommunicationcontent())
            )
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getAuditorname()).as("check auditorname").isEqualTo(actual.getAuditorname()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunicationRecordUpdatableRelationshipsEquals(CommunicationRecord expected, CommunicationRecord actual) {
        assertThat(expected)
            .as("Verify CommunicationRecord relationships")
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()))
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()))
            .satisfies(e -> assertThat(e.getCommunication()).as("check communication").isEqualTo(actual.getCommunication()))
            .satisfies(
                e -> assertThat(e.getWorkCommunicationForm()).as("check workCommunicationForm").isEqualTo(actual.getWorkCommunicationForm())
            );
    }
}
