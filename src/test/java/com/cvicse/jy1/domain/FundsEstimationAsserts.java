package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FundsEstimationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundsEstimationAllPropertiesEquals(FundsEstimation expected, FundsEstimation actual) {
        assertFundsEstimationAutoGeneratedPropertiesEquals(expected, actual);
        assertFundsEstimationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundsEstimationAllUpdatablePropertiesEquals(FundsEstimation expected, FundsEstimation actual) {
        assertFundsEstimationUpdatableFieldsEquals(expected, actual);
        assertFundsEstimationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundsEstimationAutoGeneratedPropertiesEquals(FundsEstimation expected, FundsEstimation actual) {
        assertThat(expected)
            .as("Verify FundsEstimation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundsEstimationUpdatableFieldsEquals(FundsEstimation expected, FundsEstimation actual) {
        assertThat(expected)
            .as("Verify FundsEstimation relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(
                e ->
                    assertThat(e.getUnitprice()).as("check unitprice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUnitprice())
            )
            .satisfies(
                e ->
                    assertThat(e.getMaterialfee())
                        .as("check materialfee")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMaterialfee())
            )
            .satisfies(
                e ->
                    assertThat(e.getSpecialfee())
                        .as("check specialfee")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSpecialfee())
            )
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingfee())
                        .as("check outsourcingfee")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOutsourcingfee())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalbudgetprice())
                        .as("check totalbudgetprice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalbudgetprice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFundsEstimationUpdatableRelationshipsEquals(FundsEstimation expected, FundsEstimation actual) {
        assertThat(expected)
            .as("Verify FundsEstimation relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
