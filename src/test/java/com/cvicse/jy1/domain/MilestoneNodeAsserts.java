package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MilestoneNodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilestoneNodeAllPropertiesEquals(MilestoneNode expected, MilestoneNode actual) {
        assertMilestoneNodeAutoGeneratedPropertiesEquals(expected, actual);
        assertMilestoneNodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilestoneNodeAllUpdatablePropertiesEquals(MilestoneNode expected, MilestoneNode actual) {
        assertMilestoneNodeUpdatableFieldsEquals(expected, actual);
        assertMilestoneNodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilestoneNodeAutoGeneratedPropertiesEquals(MilestoneNode expected, MilestoneNode actual) {
        assertThat(expected)
            .as("Verify MilestoneNode auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilestoneNodeUpdatableFieldsEquals(MilestoneNode expected, MilestoneNode actual) {
        assertThat(expected)
            .as("Verify MilestoneNode relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPlanpaymenttime()).as("check planpaymenttime").isEqualTo(actual.getPlanpaymenttime()))
            .satisfies(
                e ->
                    assertThat(e.getPlanpaymentamount())
                        .as("check planpaymentamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPlanpaymentamount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilestoneNodeUpdatableRelationshipsEquals(MilestoneNode expected, MilestoneNode actual) {
        assertThat(expected)
            .as("Verify MilestoneNode relationships")
            .satisfies(
                e -> assertThat(e.getOutsourcingContract()).as("check outsourcingContract").isEqualTo(actual.getOutsourcingContract())
            );
    }
}
