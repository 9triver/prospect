package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RegularInspectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegularInspectionAllPropertiesEquals(RegularInspection expected, RegularInspection actual) {
        assertRegularInspectionAutoGeneratedPropertiesEquals(expected, actual);
        assertRegularInspectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegularInspectionAllUpdatablePropertiesEquals(RegularInspection expected, RegularInspection actual) {
        assertRegularInspectionUpdatableFieldsEquals(expected, actual);
        assertRegularInspectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegularInspectionAutoGeneratedPropertiesEquals(RegularInspection expected, RegularInspection actual) {
        assertThat(expected)
            .as("Verify RegularInspection auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegularInspectionUpdatableFieldsEquals(RegularInspection expected, RegularInspection actual) {
        assertThat(expected)
            .as("Verify RegularInspection relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getWorkbagname()).as("check workbagname").isEqualTo(actual.getWorkbagname()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getStandard()).as("check standard").isEqualTo(actual.getStandard()))
            .satisfies(e -> assertThat(e.getMeasurementmethod()).as("check measurementmethod").isEqualTo(actual.getMeasurementmethod()))
            .satisfies(e -> assertThat(e.getCheckresult()).as("check checkresult").isEqualTo(actual.getCheckresult()))
            .satisfies(e -> assertThat(e.getChecktarget()).as("check checktarget").isEqualTo(actual.getChecktarget()))
            .satisfies(e -> assertThat(e.getChecktime()).as("check checktime").isEqualTo(actual.getChecktime()))
            .satisfies(e -> assertThat(e.getCheckcompletion()).as("check checkcompletion").isEqualTo(actual.getCheckcompletion()))
            .satisfies(e -> assertThat(e.getCheckstatus()).as("check checkstatus").isEqualTo(actual.getCheckstatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegularInspectionUpdatableRelationshipsEquals(RegularInspection expected, RegularInspection actual) {
        assertThat(expected)
            .as("Verify RegularInspection relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getDesigner()).as("check designer").isEqualTo(actual.getDesigner()))
            .satisfies(e -> assertThat(e.getCheckperson()).as("check checkperson").isEqualTo(actual.getCheckperson()))
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()));
    }
}
