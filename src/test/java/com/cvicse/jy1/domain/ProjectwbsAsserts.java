package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectwbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectwbsAllPropertiesEquals(Projectwbs expected, Projectwbs actual) {
        assertProjectwbsAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectwbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectwbsAllUpdatablePropertiesEquals(Projectwbs expected, Projectwbs actual) {
        assertProjectwbsUpdatableFieldsEquals(expected, actual);
        assertProjectwbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectwbsAutoGeneratedPropertiesEquals(Projectwbs expected, Projectwbs actual) {
        assertThat(expected)
            .as("Verify Projectwbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectwbsUpdatableFieldsEquals(Projectwbs expected, Projectwbs actual) {
        assertThat(expected)
            .as("Verify Projectwbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsname()).as("check wbsname").isEqualTo(actual.getWbsname()))
            .satisfies(e -> assertThat(e.getParentwbsid()).as("check parentwbsid").isEqualTo(actual.getParentwbsid()))
            .satisfies(e -> assertThat(e.getPbsid()).as("check pbsid").isEqualTo(actual.getPbsid()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getBelongfront()).as("check belongfront").isEqualTo(actual.getBelongfront()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getProgress()).as("check progress").isEqualTo(actual.getProgress()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getPriorty()).as("check priorty").isEqualTo(actual.getPriorty()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getDeliverables()).as("check deliverables").isEqualTo(actual.getDeliverables()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()))
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectwbsUpdatableRelationshipsEquals(Projectwbs expected, Projectwbs actual) {
        assertThat(expected)
            .as("Verify Projectwbs relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getTechnicaldirector()).as("check technicaldirector").isEqualTo(actual.getTechnicaldirector()))
            .satisfies(
                e ->
                    assertThat(e.getAdministrativedirector())
                        .as("check administrativedirector")
                        .isEqualTo(actual.getAdministrativedirector())
            )
            .satisfies(e -> assertThat(e.getKnowingpeople()).as("check knowingpeople").isEqualTo(actual.getKnowingpeople()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(
                e -> assertThat(e.getResponsibledepartment()).as("check responsibledepartment").isEqualTo(actual.getResponsibledepartment())
            )
            .satisfies(e -> assertThat(e.getRelevantdepartment()).as("check relevantdepartment").isEqualTo(actual.getRelevantdepartment()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getProjects()).as("check projects").isEqualTo(actual.getProjects()))
            .satisfies(e -> assertThat(e.getProjectpbs()).as("check projectpbs").isEqualTo(actual.getProjectpbs()))
            .satisfies(e -> assertThat(e.getProgressPlans()).as("check progressPlans").isEqualTo(actual.getProgressPlans()))
            .satisfies(e -> assertThat(e.getFundsEstimations()).as("check fundsEstimations").isEqualTo(actual.getFundsEstimations()))
            .satisfies(
                e -> assertThat(e.getContractCostBudgets()).as("check contractCostBudgets").isEqualTo(actual.getContractCostBudgets())
            )
            .satisfies(e -> assertThat(e.getCostControlSystems()).as("check costControlSystems").isEqualTo(actual.getCostControlSystems()))
            .satisfies(e -> assertThat(e.getQualityObjectives()).as("check qualityObjectives").isEqualTo(actual.getQualityObjectives()))
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingContractuals())
                        .as("check outsourcingContractuals")
                        .isEqualTo(actual.getOutsourcingContractuals())
            )
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingPurchasePlans())
                        .as("check outsourcingPurchasePlans")
                        .isEqualTo(actual.getOutsourcingPurchasePlans())
            )
            .satisfies(e -> assertThat(e.getTechnicals()).as("check technicals").isEqualTo(actual.getTechnicals()))
            .satisfies(
                e -> assertThat(e.getTechnicalConditions()).as("check technicalConditions").isEqualTo(actual.getTechnicalConditions())
            )
            .satisfies(e -> assertThat(e.getProjectRisks()).as("check projectRisks").isEqualTo(actual.getProjectRisks()));
    }
}
