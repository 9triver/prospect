package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualitytozeroAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualitytozeroAllPropertiesEquals(Qualitytozero expected, Qualitytozero actual) {
        assertQualitytozeroAutoGeneratedPropertiesEquals(expected, actual);
        assertQualitytozeroAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualitytozeroAllUpdatablePropertiesEquals(Qualitytozero expected, Qualitytozero actual) {
        assertQualitytozeroUpdatableFieldsEquals(expected, actual);
        assertQualitytozeroUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualitytozeroAutoGeneratedPropertiesEquals(Qualitytozero expected, Qualitytozero actual) {
        assertThat(expected)
            .as("Verify Qualitytozero auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualitytozeroUpdatableFieldsEquals(Qualitytozero expected, Qualitytozero actual) {
        assertThat(expected)
            .as("Verify Qualitytozero relevant properties")
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getBelongwbsid()).as("check belongwbsid").isEqualTo(actual.getBelongwbsid()))
            .satisfies(
                e -> assertThat(e.getOutsourcingcontractid()).as("check outsourcingcontractid").isEqualTo(actual.getOutsourcingcontractid())
            )
            .satisfies(e -> assertThat(e.getQualityproblemid()).as("check qualityproblemid").isEqualTo(actual.getQualityproblemid()))
            .satisfies(e -> assertThat(e.getQualityproblemname()).as("check qualityproblemname").isEqualTo(actual.getQualityproblemname()))
            .satisfies(e -> assertThat(e.getProblemhappentime()).as("check problemhappentime").isEqualTo(actual.getProblemhappentime()))
            .satisfies(
                e ->
                    assertThat(e.getProblemresponsibleperson())
                        .as("check problemresponsibleperson")
                        .isEqualTo(actual.getProblemresponsibleperson())
            )
            .satisfies(
                e ->
                    assertThat(e.getProblemresponsibleunit())
                        .as("check problemresponsibleunit")
                        .isEqualTo(actual.getProblemresponsibleunit())
            )
            .satisfies(e -> assertThat(e.getProducttype()).as("check producttype").isEqualTo(actual.getProducttype()))
            .satisfies(e -> assertThat(e.getProductname()).as("check productname").isEqualTo(actual.getProductname()))
            .satisfies(e -> assertThat(e.getProblemphenomenon()).as("check problemphenomenon").isEqualTo(actual.getProblemphenomenon()))
            .satisfies(e -> assertThat(e.getProblemtype()).as("check problemtype").isEqualTo(actual.getProblemtype()))
            .satisfies(e -> assertThat(e.getQualitylevel()).as("check qualitylevel").isEqualTo(actual.getQualitylevel()))
            .satisfies(e -> assertThat(e.getZerotype()).as("check zerotype").isEqualTo(actual.getZerotype()))
            .satisfies(
                e -> assertThat(e.getProblemreasonanalysis()).as("check problemreasonanalysis").isEqualTo(actual.getProblemreasonanalysis())
            )
            .satisfies(
                e -> assertThat(e.getProblemreasoncategory()).as("check problemreasoncategory").isEqualTo(actual.getProblemreasoncategory())
            )
            .satisfies(e -> assertThat(e.getTakemeasures()).as("check takemeasures").isEqualTo(actual.getTakemeasures()))
            .satisfies(e -> assertThat(e.getOnebyonecategory()).as("check onebyonecategory").isEqualTo(actual.getOnebyonecategory()))
            .satisfies(e -> assertThat(e.getVerificationeffect()).as("check verificationeffect").isEqualTo(actual.getVerificationeffect()))
            .satisfies(
                e -> assertThat(e.getQualityprojectreport()).as("check qualityprojectreport").isEqualTo(actual.getQualityprojectreport())
            )
            .satisfies(
                e -> assertThat(e.getQualitytozeroreport()).as("check qualitytozeroreport").isEqualTo(actual.getQualitytozeroreport())
            )
            .satisfies(e -> assertThat(e.getReviewopinion()).as("check reviewopinion").isEqualTo(actual.getReviewopinion()))
            .satisfies(
                e ->
                    assertThat(e.getImplementationverificationtable())
                        .as("check implementationverificationtable")
                        .isEqualTo(actual.getImplementationverificationtable())
            )
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualitytozeroUpdatableRelationshipsEquals(Qualitytozero expected, Qualitytozero actual) {
        assertThat(expected)
            .as("Verify Qualitytozero relationships")
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()));
    }
}
