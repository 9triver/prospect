package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OutsourcingContractualAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingContractualAllPropertiesEquals(OutsourcingContractual expected, OutsourcingContractual actual) {
        assertOutsourcingContractualAutoGeneratedPropertiesEquals(expected, actual);
        assertOutsourcingContractualAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingContractualAllUpdatablePropertiesEquals(
        OutsourcingContractual expected,
        OutsourcingContractual actual
    ) {
        assertOutsourcingContractualUpdatableFieldsEquals(expected, actual);
        assertOutsourcingContractualUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingContractualAutoGeneratedPropertiesEquals(
        OutsourcingContractual expected,
        OutsourcingContractual actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingContractual auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingContractualUpdatableFieldsEquals(OutsourcingContractual expected, OutsourcingContractual actual) {
        assertThat(expected)
            .as("Verify OutsourcingContractual relevant properties")
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(
                e ->
                    assertThat(e.getForeigncurrency())
                        .as("check foreigncurrency")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getForeigncurrency())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalbudget())
                        .as("check totalbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalbudget())
            )
            .satisfies(
                e ->
                    assertThat(e.getFundsinplace())
                        .as("check fundsinplace")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFundsinplace())
            )
            .satisfies(
                e -> assertThat(e.getResponsibleunitname()).as("check responsibleunitname").isEqualTo(actual.getResponsibleunitname())
            )
            .satisfies(e -> assertThat(e.getAudittime()).as("check audittime").isEqualTo(actual.getAudittime()))
            .satisfies(e -> assertThat(e.getAccountbank()).as("check accountbank").isEqualTo(actual.getAccountbank()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingContractualUpdatableRelationshipsEquals(
        OutsourcingContractual expected,
        OutsourcingContractual actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingContractual relationships")
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
