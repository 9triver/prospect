package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProjectBudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectBudgetAllPropertiesEquals(ProjectBudget expected, ProjectBudget actual) {
        assertProjectBudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectBudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectBudgetAllUpdatablePropertiesEquals(ProjectBudget expected, ProjectBudget actual) {
        assertProjectBudgetUpdatableFieldsEquals(expected, actual);
        assertProjectBudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectBudgetAutoGeneratedPropertiesEquals(ProjectBudget expected, ProjectBudget actual) {
        assertThat(expected)
            .as("Verify ProjectBudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectBudgetUpdatableFieldsEquals(ProjectBudget expected, ProjectBudget actual) {
        assertThat(expected)
            .as("Verify ProjectBudget relevant properties")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getWbsname()).as("check wbsname").isEqualTo(actual.getWbsname()))
            .satisfies(e -> assertThat(e.getParentwbsid()).as("check parentwbsid").isEqualTo(actual.getParentwbsid()))
            .satisfies(e -> assertThat(e.getSubjectid()).as("check subjectid").isEqualTo(actual.getSubjectid()))
            .satisfies(e -> assertThat(e.getSubjectname()).as("check subjectname").isEqualTo(actual.getSubjectname()))
            .satisfies(e -> assertThat(e.getContractid()).as("check contractid").isEqualTo(actual.getContractid()))
            .satisfies(e -> assertThat(e.getContractname()).as("check contractname").isEqualTo(actual.getContractname()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getAuxiliaryitem()).as("check auxiliaryitem").isEqualTo(actual.getAuxiliaryitem()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(
                e ->
                    assertThat(e.getUnitprice()).as("check unitprice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUnitprice())
            )
            .satisfies(
                e ->
                    assertThat(e.getBudgetamount())
                        .as("check budgetamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBudgetamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getEstimatedamount())
                        .as("check estimatedamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEstimatedamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getImplementedamount())
                        .as("check implementedamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getImplementedamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getDifference())
                        .as("check difference")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDifference())
            )
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectBudgetUpdatableRelationshipsEquals(ProjectBudget expected, ProjectBudget actual) {
        assertThat(expected)
            .as("Verify ProjectBudget relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
