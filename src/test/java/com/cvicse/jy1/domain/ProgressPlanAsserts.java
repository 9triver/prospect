package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgressPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressPlanAllPropertiesEquals(ProgressPlan expected, ProgressPlan actual) {
        assertProgressPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertProgressPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressPlanAllUpdatablePropertiesEquals(ProgressPlan expected, ProgressPlan actual) {
        assertProgressPlanUpdatableFieldsEquals(expected, actual);
        assertProgressPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressPlanAutoGeneratedPropertiesEquals(ProgressPlan expected, ProgressPlan actual) {
        assertThat(expected)
            .as("Verify ProgressPlan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressPlanUpdatableFieldsEquals(ProgressPlan expected, ProgressPlan actual) {
        assertThat(expected)
            .as("Verify ProgressPlan relevant properties")
            .satisfies(e -> assertThat(e.getPlanname()).as("check planname").isEqualTo(actual.getPlanname()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getPlantype()).as("check plantype").isEqualTo(actual.getPlantype()))
            .satisfies(e -> assertThat(e.getPlanlevel()).as("check planlevel").isEqualTo(actual.getPlanlevel()))
            .satisfies(e -> assertThat(e.getBelongplanid()).as("check belongplanid").isEqualTo(actual.getBelongplanid()))
            .satisfies(e -> assertThat(e.getPlanstage()).as("check planstage").isEqualTo(actual.getPlanstage()))
            .satisfies(e -> assertThat(e.getReadytime()).as("check readytime").isEqualTo(actual.getReadytime()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDeliverables()).as("check deliverables").isEqualTo(actual.getDeliverables()))
            .satisfies(e -> assertThat(e.getPlanobjectives()).as("check planobjectives").isEqualTo(actual.getPlanobjectives()))
            .satisfies(e -> assertThat(e.getPreplan()).as("check preplan").isEqualTo(actual.getPreplan()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getActualstarttime()).as("check actualstarttime").isEqualTo(actual.getActualstarttime()))
            .satisfies(e -> assertThat(e.getActualendtime()).as("check actualendtime").isEqualTo(actual.getActualendtime()))
            .satisfies(e -> assertThat(e.getProgress()).as("check progress").isEqualTo(actual.getProgress()))
            .satisfies(e -> assertThat(e.getProgresstype()).as("check progresstype").isEqualTo(actual.getProgresstype()))
            .satisfies(e -> assertThat(e.getIskey()).as("check iskey").isEqualTo(actual.getIskey()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressPlanUpdatableRelationshipsEquals(ProgressPlan expected, ProgressPlan actual) {
        assertThat(expected)
            .as("Verify ProgressPlan relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getCooperatingperson()).as("check cooperatingperson").isEqualTo(actual.getCooperatingperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(
                e -> assertThat(e.getResponsibledepartment()).as("check responsibledepartment").isEqualTo(actual.getResponsibledepartment())
            )
            .satisfies(
                e -> assertThat(e.getCooperatingdepartment()).as("check cooperatingdepartment").isEqualTo(actual.getCooperatingdepartment())
            )
            .satisfies(e -> assertThat(e.getPlanReturns()).as("check planReturns").isEqualTo(actual.getPlanReturns()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()))
            .satisfies(e -> assertThat(e.getProjectRisks()).as("check projectRisks").isEqualTo(actual.getProjectRisks()));
    }
}
