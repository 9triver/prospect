package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectRiskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAllPropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertProjectRiskAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectRiskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAllUpdatablePropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertProjectRiskUpdatableFieldsEquals(expected, actual);
        assertProjectRiskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAutoGeneratedPropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskUpdatableFieldsEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk relevant properties")
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getNodename()).as("check nodename").isEqualTo(actual.getNodename()))
            .satisfies(e -> assertThat(e.getRisktype()).as("check risktype").isEqualTo(actual.getRisktype()))
            .satisfies(e -> assertThat(e.getDecumentid()).as("check decumentid").isEqualTo(actual.getDecumentid()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getUsetime()).as("check usetime").isEqualTo(actual.getUsetime()))
            .satisfies(e -> assertThat(e.getSystemlevel()).as("check systemlevel").isEqualTo(actual.getSystemlevel()))
            .satisfies(e -> assertThat(e.getRisklevel()).as("check risklevel").isEqualTo(actual.getRisklevel()))
            .satisfies(e -> assertThat(e.getLimitationtime()).as("check limitationtime").isEqualTo(actual.getLimitationtime()))
            .satisfies(e -> assertThat(e.getClosetype()).as("check closetype").isEqualTo(actual.getClosetype()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskUpdatableRelationshipsEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk relationships")
            .satisfies(e -> assertThat(e.getRiskReport()).as("check riskReport").isEqualTo(actual.getRiskReport()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()))
            .satisfies(e -> assertThat(e.getProgressPlans()).as("check progressPlans").isEqualTo(actual.getProgressPlans()));
    }
}
