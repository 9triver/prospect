package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectRiskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAllPropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertProjectRiskAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectRiskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAllUpdatablePropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertProjectRiskUpdatableFieldsEquals(expected, actual);
        assertProjectRiskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskAutoGeneratedPropertiesEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskUpdatableFieldsEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk relevant properties")
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getRiskcontent()).as("check riskcontent").isEqualTo(actual.getRiskcontent()))
            .satisfies(e -> assertThat(e.getIdentificationtime()).as("check identificationtime").isEqualTo(actual.getIdentificationtime()))
            .satisfies(e -> assertThat(e.getRiskreason()).as("check riskreason").isEqualTo(actual.getRiskreason()))
            .satisfies(e -> assertThat(e.getImportantrange()).as("check importantrange").isEqualTo(actual.getImportantrange()))
            .satisfies(
                e -> assertThat(e.getMeasuresandtimelimit()).as("check measuresandtimelimit").isEqualTo(actual.getMeasuresandtimelimit())
            )
            .satisfies(e -> assertThat(e.getConditions()).as("check conditions").isEqualTo(actual.getConditions()))
            .satisfies(
                e -> assertThat(e.getClosedloopindicator()).as("check closedloopindicator").isEqualTo(actual.getClosedloopindicator())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectRiskUpdatableRelationshipsEquals(ProjectRisk expected, ProjectRisk actual) {
        assertThat(expected)
            .as("Verify ProjectRisk relationships")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()))
            .satisfies(e -> assertThat(e.getFrontlineid()).as("check frontlineid").isEqualTo(actual.getFrontlineid()))
            .satisfies(e -> assertThat(e.getSystemLevel()).as("check systemLevel").isEqualTo(actual.getSystemLevel()))
            .satisfies(e -> assertThat(e.getRiskType()).as("check riskType").isEqualTo(actual.getRiskType()))
            .satisfies(e -> assertThat(e.getRiskLevel()).as("check riskLevel").isEqualTo(actual.getRiskLevel()))
            .satisfies(e -> assertThat(e.getRiskPossibility()).as("check riskPossibility").isEqualTo(actual.getRiskPossibility()))
            .satisfies(e -> assertThat(e.getProgressPlans()).as("check progressPlans").isEqualTo(actual.getProgressPlans()));
    }
}
