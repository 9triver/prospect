package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeaveApplicationInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationInfoAllPropertiesEquals(LeaveApplicationInfo expected, LeaveApplicationInfo actual) {
        assertLeaveApplicationInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertLeaveApplicationInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationInfoAllUpdatablePropertiesEquals(LeaveApplicationInfo expected, LeaveApplicationInfo actual) {
        assertLeaveApplicationInfoUpdatableFieldsEquals(expected, actual);
        assertLeaveApplicationInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationInfoAutoGeneratedPropertiesEquals(LeaveApplicationInfo expected, LeaveApplicationInfo actual) {
        assertThat(expected)
            .as("Verify LeaveApplicationInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationInfoUpdatableFieldsEquals(LeaveApplicationInfo expected, LeaveApplicationInfo actual) {
        assertThat(expected)
            .as("Verify LeaveApplicationInfo relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getLeaveType()).as("check leaveType").isEqualTo(actual.getLeaveType()))
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationInfoUpdatableRelationshipsEquals(LeaveApplicationInfo expected, LeaveApplicationInfo actual) {}
}
