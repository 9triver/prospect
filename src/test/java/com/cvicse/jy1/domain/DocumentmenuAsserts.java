package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentmenuAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentmenuAllPropertiesEquals(Documentmenu expected, Documentmenu actual) {
        assertDocumentmenuAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentmenuAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentmenuAllUpdatablePropertiesEquals(Documentmenu expected, Documentmenu actual) {
        assertDocumentmenuUpdatableFieldsEquals(expected, actual);
        assertDocumentmenuUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentmenuAutoGeneratedPropertiesEquals(Documentmenu expected, Documentmenu actual) {
        assertThat(expected)
            .as("Verify Documentmenu auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentmenuUpdatableFieldsEquals(Documentmenu expected, Documentmenu actual) {
        assertThat(expected)
            .as("Verify Documentmenu relevant properties")
            .satisfies(e -> assertThat(e.getMenuid()).as("check menuid").isEqualTo(actual.getMenuid()))
            .satisfies(e -> assertThat(e.getBelongtype()).as("check belongtype").isEqualTo(actual.getBelongtype()))
            .satisfies(e -> assertThat(e.getMenuname()).as("check menuname").isEqualTo(actual.getMenuname()))
            .satisfies(e -> assertThat(e.getParentmenuid()).as("check parentmenuid").isEqualTo(actual.getParentmenuid()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getCreatorname()).as("check creatorname").isEqualTo(actual.getCreatorname()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getFilenum()).as("check filenum").isEqualTo(actual.getFilenum()))
            .satisfies(e -> assertThat(e.getFileurl()).as("check fileurl").isEqualTo(actual.getFileurl()))
            .satisfies(e -> assertThat(e.getDepartmentid()).as("check departmentid").isEqualTo(actual.getDepartmentid()))
            .satisfies(e -> assertThat(e.getDepartmentname()).as("check departmentname").isEqualTo(actual.getDepartmentname()))
            .satisfies(e -> assertThat(e.getSpare1()).as("check spare1").isEqualTo(actual.getSpare1()))
            .satisfies(e -> assertThat(e.getSpare2()).as("check spare2").isEqualTo(actual.getSpare2()))
            .satisfies(e -> assertThat(e.getSpare3()).as("check spare3").isEqualTo(actual.getSpare3()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentmenuUpdatableRelationshipsEquals(Documentmenu expected, Documentmenu actual) {}
}
