package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeviationPermitApplicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviationPermitApplicationAllPropertiesEquals(
        DeviationPermitApplication expected,
        DeviationPermitApplication actual
    ) {
        assertDeviationPermitApplicationAutoGeneratedPropertiesEquals(expected, actual);
        assertDeviationPermitApplicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviationPermitApplicationAllUpdatablePropertiesEquals(
        DeviationPermitApplication expected,
        DeviationPermitApplication actual
    ) {
        assertDeviationPermitApplicationUpdatableFieldsEquals(expected, actual);
        assertDeviationPermitApplicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviationPermitApplicationAutoGeneratedPropertiesEquals(
        DeviationPermitApplication expected,
        DeviationPermitApplication actual
    ) {
        assertThat(expected)
            .as("Verify DeviationPermitApplication auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviationPermitApplicationUpdatableFieldsEquals(
        DeviationPermitApplication expected,
        DeviationPermitApplication actual
    ) {
        assertThat(expected)
            .as("Verify DeviationPermitApplication relevant properties")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getTechnicalfileid()).as("check technicalfileid").isEqualTo(actual.getTechnicalfileid()))
            .satisfies(e -> assertThat(e.getApplicationunit()).as("check applicationunit").isEqualTo(actual.getApplicationunit()))
            .satisfies(e -> assertThat(e.getApplicant()).as("check applicant").isEqualTo(actual.getApplicant()))
            .satisfies(e -> assertThat(e.getApplicationdate()).as("check applicationdate").isEqualTo(actual.getApplicationdate()))
            .satisfies(e -> assertThat(e.getPermitcontent()).as("check permitcontent").isEqualTo(actual.getPermitcontent()))
            .satisfies(e -> assertThat(e.getPermitreason()).as("check permitreason").isEqualTo(actual.getPermitreason()))
            .satisfies(e -> assertThat(e.getProjectinfluence()).as("check projectinfluence").isEqualTo(actual.getProjectinfluence()))
            .satisfies(e -> assertThat(e.getContractinfluence()).as("check contractinfluence").isEqualTo(actual.getContractinfluence()))
            .satisfies(e -> assertThat(e.getPermitrange()).as("check permitrange").isEqualTo(actual.getPermitrange()))
            .satisfies(e -> assertThat(e.getImplementationdate()).as("check implementationdate").isEqualTo(actual.getImplementationdate()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviationPermitApplicationUpdatableRelationshipsEquals(
        DeviationPermitApplication expected,
        DeviationPermitApplication actual
    ) {
        assertThat(expected)
            .as("Verify DeviationPermitApplication relationships")
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
