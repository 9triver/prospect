package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerSatisfactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerSatisfactionAllPropertiesEquals(CustomerSatisfaction expected, CustomerSatisfaction actual) {
        assertCustomerSatisfactionAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerSatisfactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerSatisfactionAllUpdatablePropertiesEquals(CustomerSatisfaction expected, CustomerSatisfaction actual) {
        assertCustomerSatisfactionUpdatableFieldsEquals(expected, actual);
        assertCustomerSatisfactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerSatisfactionAutoGeneratedPropertiesEquals(CustomerSatisfaction expected, CustomerSatisfaction actual) {
        assertThat(expected)
            .as("Verify CustomerSatisfaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerSatisfactionUpdatableFieldsEquals(CustomerSatisfaction expected, CustomerSatisfaction actual) {
        assertThat(expected)
            .as("Verify CustomerSatisfaction relevant properties")
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getSatisfactionitem()).as("check satisfactionitem").isEqualTo(actual.getSatisfactionitem()))
            .satisfies(e -> assertThat(e.getScore()).as("check score").isEqualTo(actual.getScore()))
            .satisfies(e -> assertThat(e.getOpinion()).as("check opinion").isEqualTo(actual.getOpinion()))
            .satisfies(e -> assertThat(e.getTotalscore()).as("check totalscore").isEqualTo(actual.getTotalscore()))
            .satisfies(e -> assertThat(e.getSurveytime()).as("check surveytime").isEqualTo(actual.getSurveytime()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()))
            .satisfies(e -> assertThat(e.getPlonenumber()).as("check plonenumber").isEqualTo(actual.getPlonenumber()))
            .satisfies(e -> assertThat(e.getFilename()).as("check filename").isEqualTo(actual.getFilename()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerSatisfactionUpdatableRelationshipsEquals(CustomerSatisfaction expected, CustomerSatisfaction actual) {
        assertThat(expected)
            .as("Verify CustomerSatisfaction relationships")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()));
    }
}
