package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualityPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityPlanAllPropertiesEquals(QualityPlan expected, QualityPlan actual) {
        assertQualityPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertQualityPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityPlanAllUpdatablePropertiesEquals(QualityPlan expected, QualityPlan actual) {
        assertQualityPlanUpdatableFieldsEquals(expected, actual);
        assertQualityPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityPlanAutoGeneratedPropertiesEquals(QualityPlan expected, QualityPlan actual) {
        assertThat(expected)
            .as("Verify QualityPlan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityPlanUpdatableFieldsEquals(QualityPlan expected, QualityPlan actual) {
        assertThat(expected)
            .as("Verify QualityPlan relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getQualitytype()).as("check qualitytype").isEqualTo(actual.getQualitytype()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getFileversion()).as("check fileversion").isEqualTo(actual.getFileversion()))
            .satisfies(e -> assertThat(e.getAuthor()).as("check author").isEqualTo(actual.getAuthor()))
            .satisfies(e -> assertThat(e.getAttachment()).as("check attachment").isEqualTo(actual.getAttachment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualityPlanUpdatableRelationshipsEquals(QualityPlan expected, QualityPlan actual) {
        assertThat(expected)
            .as("Verify QualityPlan relationships")
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()))
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()));
    }
}
