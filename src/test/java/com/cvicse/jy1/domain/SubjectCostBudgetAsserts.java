package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubjectCostBudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubjectCostBudgetAllPropertiesEquals(SubjectCostBudget expected, SubjectCostBudget actual) {
        assertSubjectCostBudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertSubjectCostBudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubjectCostBudgetAllUpdatablePropertiesEquals(SubjectCostBudget expected, SubjectCostBudget actual) {
        assertSubjectCostBudgetUpdatableFieldsEquals(expected, actual);
        assertSubjectCostBudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubjectCostBudgetAutoGeneratedPropertiesEquals(SubjectCostBudget expected, SubjectCostBudget actual) {
        assertThat(expected)
            .as("Verify SubjectCostBudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubjectCostBudgetUpdatableFieldsEquals(SubjectCostBudget expected, SubjectCostBudget actual) {
        assertThat(expected)
            .as("Verify SubjectCostBudget relevant properties")
            .satisfies(e -> assertThat(e.getContractid()).as("check contractid").isEqualTo(actual.getContractid()))
            .satisfies(e -> assertThat(e.getSubjectid()).as("check subjectid").isEqualTo(actual.getSubjectid()))
            .satisfies(e -> assertThat(e.getSubjectname()).as("check subjectname").isEqualTo(actual.getSubjectname()))
            .satisfies(
                e ->
                    assertThat(e.getBudgetamount())
                        .as("check budgetamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBudgetamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getEstimatedamount())
                        .as("check estimatedamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEstimatedamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getImplementedamount())
                        .as("check implementedamount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getImplementedamount())
            )
            .satisfies(
                e ->
                    assertThat(e.getDifference())
                        .as("check difference")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDifference())
            )
            .satisfies(
                e ->
                    assertThat(e.getPercentage())
                        .as("check percentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentage())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubjectCostBudgetUpdatableRelationshipsEquals(SubjectCostBudget expected, SubjectCostBudget actual) {
        assertThat(expected)
            .as("Verify SubjectCostBudget relationships")
            .satisfies(e -> assertThat(e.getProjectBudget()).as("check projectBudget").isEqualTo(actual.getProjectBudget()))
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
