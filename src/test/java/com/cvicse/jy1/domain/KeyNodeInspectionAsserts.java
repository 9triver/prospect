package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KeyNodeInspectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKeyNodeInspectionAllPropertiesEquals(KeyNodeInspection expected, KeyNodeInspection actual) {
        assertKeyNodeInspectionAutoGeneratedPropertiesEquals(expected, actual);
        assertKeyNodeInspectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKeyNodeInspectionAllUpdatablePropertiesEquals(KeyNodeInspection expected, KeyNodeInspection actual) {
        assertKeyNodeInspectionUpdatableFieldsEquals(expected, actual);
        assertKeyNodeInspectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKeyNodeInspectionAutoGeneratedPropertiesEquals(KeyNodeInspection expected, KeyNodeInspection actual) {
        assertThat(expected)
            .as("Verify KeyNodeInspection auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKeyNodeInspectionUpdatableFieldsEquals(KeyNodeInspection expected, KeyNodeInspection actual) {
        assertThat(expected)
            .as("Verify KeyNodeInspection relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getWorkbagname()).as("check workbagname").isEqualTo(actual.getWorkbagname()))
            .satisfies(e -> assertThat(e.getBelongwbsid()).as("check belongwbsid").isEqualTo(actual.getBelongwbsid()))
            .satisfies(e -> assertThat(e.getProjectlevel()).as("check projectlevel").isEqualTo(actual.getProjectlevel()))
            .satisfies(e -> assertThat(e.getIskey()).as("check iskey").isEqualTo(actual.getIskey()))
            .satisfies(
                e -> assertThat(e.getIsimplementationplan()).as("check isimplementationplan").isEqualTo(actual.getIsimplementationplan())
            )
            .satisfies(e -> assertThat(e.getIsqualityplan()).as("check isqualityplan").isEqualTo(actual.getIsqualityplan()))
            .satisfies(e -> assertThat(e.getIstechniqueplan()).as("check istechniqueplan").isEqualTo(actual.getIstechniqueplan()))
            .satisfies(
                e ->
                    assertThat(e.getImplementationplanstatus())
                        .as("check implementationplanstatus")
                        .isEqualTo(actual.getImplementationplanstatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsimplementationplanmaterial())
                        .as("check isimplementationplanmaterial")
                        .isEqualTo(actual.getIsimplementationplanmaterial())
            )
            .satisfies(
                e -> assertThat(e.getTechnologyplanstatus()).as("check technologyplanstatus").isEqualTo(actual.getTechnologyplanstatus())
            )
            .satisfies(
                e -> assertThat(e.getIstechnologymaterial()).as("check istechnologymaterial").isEqualTo(actual.getIstechnologymaterial())
            )
            .satisfies(e -> assertThat(e.getFirstcheckstatus()).as("check firstcheckstatus").isEqualTo(actual.getFirstcheckstatus()))
            .satisfies(
                e -> assertThat(e.getIsfirstcheckmaterial()).as("check isfirstcheckmaterial").isEqualTo(actual.getIsfirstcheckmaterial())
            )
            .satisfies(
                e -> assertThat(e.getProductioncheckstatus()).as("check productioncheckstatus").isEqualTo(actual.getProductioncheckstatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsproductioncheckmaterial())
                        .as("check isproductioncheckmaterial")
                        .isEqualTo(actual.getIsproductioncheckmaterial())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKeyNodeInspectionUpdatableRelationshipsEquals(KeyNodeInspection expected, KeyNodeInspection actual) {}
}
