package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LetterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLetterAllPropertiesEquals(Letter expected, Letter actual) {
        assertLetterAutoGeneratedPropertiesEquals(expected, actual);
        assertLetterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLetterAllUpdatablePropertiesEquals(Letter expected, Letter actual) {
        assertLetterUpdatableFieldsEquals(expected, actual);
        assertLetterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLetterAutoGeneratedPropertiesEquals(Letter expected, Letter actual) {
        assertThat(expected)
            .as("Verify Letter auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLetterUpdatableFieldsEquals(Letter expected, Letter actual) {
        assertThat(expected)
            .as("Verify Letter relevant properties")
            .satisfies(e -> assertThat(e.getLettername()).as("check lettername").isEqualTo(actual.getLettername()))
            .satisfies(e -> assertThat(e.getLetternumber()).as("check letternumber").isEqualTo(actual.getLetternumber()))
            .satisfies(e -> assertThat(e.getLettertype()).as("check lettertype").isEqualTo(actual.getLettertype()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getLettercontent()).as("check lettercontent").isEqualTo(actual.getLettercontent()))
            .satisfies(e -> assertThat(e.getLetterstatus()).as("check letterstatus").isEqualTo(actual.getLetterstatus()))
            .satisfies(e -> assertThat(e.getLettertime()).as("check lettertime").isEqualTo(actual.getLettertime()))
            .satisfies(e -> assertThat(e.getPreviousfile()).as("check previousfile").isEqualTo(actual.getPreviousfile()))
            .satisfies(e -> assertThat(e.getDatarecordstatus()).as("check datarecordstatus").isEqualTo(actual.getDatarecordstatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLetterUpdatableRelationshipsEquals(Letter expected, Letter actual) {
        assertThat(expected)
            .as("Verify Letter relationships")
            .satisfies(e -> assertThat(e.getWbsid()).as("check wbsid").isEqualTo(actual.getWbsid()))
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getFrontlineid()).as("check frontlineid").isEqualTo(actual.getFrontlineid()))
            .satisfies(e -> assertThat(e.getReceivingunit()).as("check receivingunit").isEqualTo(actual.getReceivingunit()))
            .satisfies(e -> assertThat(e.getSendingunit()).as("check sendingunit").isEqualTo(actual.getSendingunit()))
            .satisfies(e -> assertThat(e.getLettermaker()).as("check lettermaker").isEqualTo(actual.getLettermaker()))
            .satisfies(e -> assertThat(e.getLetterreceiver()).as("check letterreceiver").isEqualTo(actual.getLetterreceiver()))
            .satisfies(e -> assertThat(e.getLetterhandler()).as("check letterhandler").isEqualTo(actual.getLetterhandler()));
    }
}
