package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WorkbagAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkbagAllPropertiesEquals(Workbag expected, Workbag actual) {
        assertWorkbagAutoGeneratedPropertiesEquals(expected, actual);
        assertWorkbagAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkbagAllUpdatablePropertiesEquals(Workbag expected, Workbag actual) {
        assertWorkbagUpdatableFieldsEquals(expected, actual);
        assertWorkbagUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkbagAutoGeneratedPropertiesEquals(Workbag expected, Workbag actual) {
        assertThat(expected)
            .as("Verify Workbag auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkbagUpdatableFieldsEquals(Workbag expected, Workbag actual) {
        assertThat(expected)
            .as("Verify Workbag relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPbsid()).as("check pbsid").isEqualTo(actual.getPbsid()))
            .satisfies(e -> assertThat(e.getWorkbagtype()).as("check workbagtype").isEqualTo(actual.getWorkbagtype()))
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(e -> assertThat(e.getIskeyimportant()).as("check iskeyimportant").isEqualTo(actual.getIskeyimportant()))
            .satisfies(e -> assertThat(e.getKeypbsname()).as("check keypbsname").isEqualTo(actual.getKeypbsname()))
            .satisfies(e -> assertThat(e.getImportantpbsname()).as("check importantpbsname").isEqualTo(actual.getImportantpbsname()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(
                e ->
                    assertThat(e.getEstimatedpurchasingtime())
                        .as("check estimatedpurchasingtime")
                        .isEqualTo(actual.getEstimatedpurchasingtime())
            )
            .satisfies(e -> assertThat(e.getProgress()).as("check progress").isEqualTo(actual.getProgress()))
            .satisfies(e -> assertThat(e.getIssafetywork()).as("check issafetywork").isEqualTo(actual.getIssafetywork()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkbagUpdatableRelationshipsEquals(Workbag expected, Workbag actual) {
        assertThat(expected)
            .as("Verify Workbag relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getProjectmanager()).as("check projectmanager").isEqualTo(actual.getProjectmanager()))
            .satisfies(e -> assertThat(e.getKnowingpeople()).as("check knowingpeople").isEqualTo(actual.getKnowingpeople()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(
                e -> assertThat(e.getResponsibledepartment()).as("check responsibledepartment").isEqualTo(actual.getResponsibledepartment())
            )
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(
                e -> assertThat(e.getProjectdeliverables()).as("check projectdeliverables").isEqualTo(actual.getProjectdeliverables())
            )
            .satisfies(
                e -> assertThat(e.getRelevantdepartments()).as("check relevantdepartments").isEqualTo(actual.getRelevantdepartments())
            )
            .satisfies(e -> assertThat(e.getWbsids()).as("check wbsids").isEqualTo(actual.getWbsids()))
            .satisfies(e -> assertThat(e.getWorks()).as("check works").isEqualTo(actual.getWorks()));
    }
}
