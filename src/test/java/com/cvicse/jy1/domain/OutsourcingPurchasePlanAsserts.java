package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OutsourcingPurchasePlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchasePlanAllPropertiesEquals(OutsourcingPurchasePlan expected, OutsourcingPurchasePlan actual) {
        assertOutsourcingPurchasePlanAutoGeneratedPropertiesEquals(expected, actual);
        assertOutsourcingPurchasePlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchasePlanAllUpdatablePropertiesEquals(
        OutsourcingPurchasePlan expected,
        OutsourcingPurchasePlan actual
    ) {
        assertOutsourcingPurchasePlanUpdatableFieldsEquals(expected, actual);
        assertOutsourcingPurchasePlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchasePlanAutoGeneratedPropertiesEquals(
        OutsourcingPurchasePlan expected,
        OutsourcingPurchasePlan actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchasePlan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchasePlanUpdatableFieldsEquals(
        OutsourcingPurchasePlan expected,
        OutsourcingPurchasePlan actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchasePlan relevant properties")
            .satisfies(e -> assertThat(e.getMatarialname()).as("check matarialname").isEqualTo(actual.getMatarialname()))
            .satisfies(e -> assertThat(e.getPurchasingmethod()).as("check purchasingmethod").isEqualTo(actual.getPurchasingmethod()))
            .satisfies(e -> assertThat(e.getBudgit()).as("check budgit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudgit()))
            .satisfies(e -> assertThat(e.getNeedtime()).as("check needtime").isEqualTo(actual.getNeedtime()))
            .satisfies(e -> assertThat(e.getPlanusetime()).as("check planusetime").isEqualTo(actual.getPlanusetime()))
            .satisfies(e -> assertThat(e.getSupplierid()).as("check supplierid").isEqualTo(actual.getSupplierid()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchasePlanUpdatableRelationshipsEquals(
        OutsourcingPurchasePlan expected,
        OutsourcingPurchasePlan actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchasePlan relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectwbs()).as("check projectwbs").isEqualTo(actual.getProjectwbs()));
    }
}
