package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EventsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventsAllPropertiesEquals(Events expected, Events actual) {
        assertEventsAutoGeneratedPropertiesEquals(expected, actual);
        assertEventsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventsAllUpdatablePropertiesEquals(Events expected, Events actual) {
        assertEventsUpdatableFieldsEquals(expected, actual);
        assertEventsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventsAutoGeneratedPropertiesEquals(Events expected, Events actual) {
        assertThat(expected)
            .as("Verify Events auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventsUpdatableFieldsEquals(Events expected, Events actual) {
        assertThat(expected)
            .as("Verify Events relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getTime()).as("check time").isEqualTo(actual.getTime()))
            .satisfies(e -> assertThat(e.getPlace()).as("check place").isEqualTo(actual.getPlace()))
            .satisfies(e -> assertThat(e.getParticipants()).as("check participants").isEqualTo(actual.getParticipants()))
            .satisfies(e -> assertThat(e.getPicture()).as("check picture").isEqualTo(actual.getPicture()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAttachment()).as("check attachment").isEqualTo(actual.getAttachment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventsUpdatableRelationshipsEquals(Events expected, Events actual) {}
}
