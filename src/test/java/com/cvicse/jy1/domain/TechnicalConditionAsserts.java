package com.cvicse.jy1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TechnicalConditionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAllPropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertTechnicalConditionAutoGeneratedPropertiesEquals(expected, actual);
        assertTechnicalConditionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAllUpdatablePropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertTechnicalConditionUpdatableFieldsEquals(expected, actual);
        assertTechnicalConditionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAutoGeneratedPropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionUpdatableFieldsEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition relevant properties")
            .satisfies(e -> assertThat(e.getWorkbagid()).as("check workbagid").isEqualTo(actual.getWorkbagid()))
            .satisfies(e -> assertThat(e.getBelongwbsid()).as("check belongwbsid").isEqualTo(actual.getBelongwbsid()))
            .satisfies(
                e -> assertThat(e.getOutsourcingcontractid()).as("check outsourcingcontractid").isEqualTo(actual.getOutsourcingcontractid())
            )
            .satisfies(e -> assertThat(e.getTechnicalid()).as("check technicalid").isEqualTo(actual.getTechnicalid()))
            .satisfies(e -> assertThat(e.getTechnicalname()).as("check technicalname").isEqualTo(actual.getTechnicalname()))
            .satisfies(e -> assertThat(e.getChangedfilename()).as("check changedfilename").isEqualTo(actual.getChangedfilename()))
            .satisfies(e -> assertThat(e.getApplicant()).as("check applicant").isEqualTo(actual.getApplicant()))
            .satisfies(e -> assertThat(e.getApplicationdate()).as("check applicationdate").isEqualTo(actual.getApplicationdate()))
            .satisfies(e -> assertThat(e.getChangedreason()).as("check changedreason").isEqualTo(actual.getChangedreason()))
            .satisfies(e -> assertThat(e.getChangedbefore()).as("check changedbefore").isEqualTo(actual.getChangedbefore()))
            .satisfies(e -> assertThat(e.getChangedafter()).as("check changedafter").isEqualTo(actual.getChangedafter()))
            .satisfies(e -> assertThat(e.getDistributionrange()).as("check distributionrange").isEqualTo(actual.getDistributionrange()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionUpdatableRelationshipsEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition relationships")
            .satisfies(e -> assertThat(e.getWorkbag()).as("check workbag").isEqualTo(actual.getWorkbag()));
    }
}
