package com.cvicse.jy1.domain;

import static com.cvicse.jy1.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OutsourcingPurchaseExecuteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchaseExecuteAllPropertiesEquals(
        OutsourcingPurchaseExecute expected,
        OutsourcingPurchaseExecute actual
    ) {
        assertOutsourcingPurchaseExecuteAutoGeneratedPropertiesEquals(expected, actual);
        assertOutsourcingPurchaseExecuteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchaseExecuteAllUpdatablePropertiesEquals(
        OutsourcingPurchaseExecute expected,
        OutsourcingPurchaseExecute actual
    ) {
        assertOutsourcingPurchaseExecuteUpdatableFieldsEquals(expected, actual);
        assertOutsourcingPurchaseExecuteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchaseExecuteAutoGeneratedPropertiesEquals(
        OutsourcingPurchaseExecute expected,
        OutsourcingPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchaseExecute auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchaseExecuteUpdatableFieldsEquals(
        OutsourcingPurchaseExecute expected,
        OutsourcingPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchaseExecute relevant properties")
            .satisfies(e -> assertThat(e.getMatarialname()).as("check matarialname").isEqualTo(actual.getMatarialname()))
            .satisfies(e -> assertThat(e.getPurchasingmethod()).as("check purchasingmethod").isEqualTo(actual.getPurchasingmethod()))
            .satisfies(e -> assertThat(e.getBudgit()).as("check budgit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudgit()))
            .satisfies(e -> assertThat(e.getNeedtime()).as("check needtime").isEqualTo(actual.getNeedtime()))
            .satisfies(e -> assertThat(e.getPlanusetime()).as("check planusetime").isEqualTo(actual.getPlanusetime()))
            .satisfies(e -> assertThat(e.getSupplierid()).as("check supplierid").isEqualTo(actual.getSupplierid()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingPurchaseExecuteUpdatableRelationshipsEquals(
        OutsourcingPurchaseExecute expected,
        OutsourcingPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingPurchaseExecute relationships")
            .satisfies(e -> assertThat(e.getResponsibleperson()).as("check responsibleperson").isEqualTo(actual.getResponsibleperson()))
            .satisfies(e -> assertThat(e.getOutsourcingplanid()).as("check outsourcingplanid").isEqualTo(actual.getOutsourcingplanid()));
    }
}
