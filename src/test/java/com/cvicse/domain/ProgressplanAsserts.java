package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgressplanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressplanAllPropertiesEquals(Progressplan expected, Progressplan actual) {
        assertProgressplanAutoGeneratedPropertiesEquals(expected, actual);
        assertProgressplanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressplanAllUpdatablePropertiesEquals(Progressplan expected, Progressplan actual) {
        assertProgressplanUpdatableFieldsEquals(expected, actual);
        assertProgressplanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressplanAutoGeneratedPropertiesEquals(Progressplan expected, Progressplan actual) {
        assertThat(expected)
            .as("Verify Progressplan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressplanUpdatableFieldsEquals(Progressplan expected, Progressplan actual) {
        assertThat(expected)
            .as("Verify Progressplan relevant properties")
            .satisfies(e -> assertThat(e.getProgressname()).as("check progressname").isEqualTo(actual.getProgressname()))
            .satisfies(e -> assertThat(e.getProgresstype()).as("check progresstype").isEqualTo(actual.getProgresstype()))
            .satisfies(e -> assertThat(e.getWorkfocus()).as("check workfocus").isEqualTo(actual.getWorkfocus()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getCreatorname()).as("check creatorname").isEqualTo(actual.getCreatorname()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressplanUpdatableRelationshipsEquals(Progressplan expected, Progressplan actual) {
        assertThat(expected)
            .as("Verify Progressplan relationships")
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getPlanreturns()).as("check planreturns").isEqualTo(actual.getPlanreturns()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
