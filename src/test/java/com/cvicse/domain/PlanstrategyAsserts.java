package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanstrategyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanstrategyAllPropertiesEquals(Planstrategy expected, Planstrategy actual) {
        assertPlanstrategyAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanstrategyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanstrategyAllUpdatablePropertiesEquals(Planstrategy expected, Planstrategy actual) {
        assertPlanstrategyUpdatableFieldsEquals(expected, actual);
        assertPlanstrategyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanstrategyAutoGeneratedPropertiesEquals(Planstrategy expected, Planstrategy actual) {
        assertThat(expected)
            .as("Verify Planstrategy auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanstrategyUpdatableFieldsEquals(Planstrategy expected, Planstrategy actual) {
        assertThat(expected)
            .as("Verify Planstrategy relevant properties")
            .satisfies(e -> assertThat(e.getStrategyname()).as("check strategyname").isEqualTo(actual.getStrategyname()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanstrategyUpdatableRelationshipsEquals(Planstrategy expected, Planstrategy actual) {
        assertThat(expected)
            .as("Verify Planstrategy relationships")
            .satisfies(e -> assertThat(e.getDecument()).as("check decument").isEqualTo(actual.getDecument()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
