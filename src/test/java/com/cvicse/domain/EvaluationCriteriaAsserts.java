package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EvaluationCriteriaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationCriteriaAllPropertiesEquals(EvaluationCriteria expected, EvaluationCriteria actual) {
        assertEvaluationCriteriaAutoGeneratedPropertiesEquals(expected, actual);
        assertEvaluationCriteriaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationCriteriaAllUpdatablePropertiesEquals(EvaluationCriteria expected, EvaluationCriteria actual) {
        assertEvaluationCriteriaUpdatableFieldsEquals(expected, actual);
        assertEvaluationCriteriaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationCriteriaAutoGeneratedPropertiesEquals(EvaluationCriteria expected, EvaluationCriteria actual) {
        assertThat(expected)
            .as("Verify EvaluationCriteria auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationCriteriaUpdatableFieldsEquals(EvaluationCriteria expected, EvaluationCriteria actual) {
        assertThat(expected)
            .as("Verify EvaluationCriteria relevant properties")
            .satisfies(e -> assertThat(e.getStandardtype()).as("check standardtype").isEqualTo(actual.getStandardtype()))
            .satisfies(e -> assertThat(e.getStandardname()).as("check standardname").isEqualTo(actual.getStandardname()))
            .satisfies(e -> assertThat(e.getMark()).as("check mark").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvaluationCriteriaUpdatableRelationshipsEquals(EvaluationCriteria expected, EvaluationCriteria actual) {
        assertThat(expected)
            .as("Verify EvaluationCriteria relationships")
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()));
    }
}
