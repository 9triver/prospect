package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IntegratedmanagementWbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegratedmanagementWbsAllPropertiesEquals(IntegratedmanagementWbs expected, IntegratedmanagementWbs actual) {
        assertIntegratedmanagementWbsAutoGeneratedPropertiesEquals(expected, actual);
        assertIntegratedmanagementWbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegratedmanagementWbsAllUpdatablePropertiesEquals(
        IntegratedmanagementWbs expected,
        IntegratedmanagementWbs actual
    ) {
        assertIntegratedmanagementWbsUpdatableFieldsEquals(expected, actual);
        assertIntegratedmanagementWbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegratedmanagementWbsAutoGeneratedPropertiesEquals(
        IntegratedmanagementWbs expected,
        IntegratedmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify IntegratedmanagementWbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegratedmanagementWbsUpdatableFieldsEquals(
        IntegratedmanagementWbs expected,
        IntegratedmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify IntegratedmanagementWbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsspare1()).as("check wbsspare1").isEqualTo(actual.getWbsspare1()))
            .satisfies(e -> assertThat(e.getWbsspare2()).as("check wbsspare2").isEqualTo(actual.getWbsspare2()))
            .satisfies(e -> assertThat(e.getWbsspare3()).as("check wbsspare3").isEqualTo(actual.getWbsspare3()))
            .satisfies(e -> assertThat(e.getWbsspare4()).as("check wbsspare4").isEqualTo(actual.getWbsspare4()))
            .satisfies(e -> assertThat(e.getWbsspare5()).as("check wbsspare5").isEqualTo(actual.getWbsspare5()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIntegratedmanagementWbsUpdatableRelationshipsEquals(
        IntegratedmanagementWbs expected,
        IntegratedmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify IntegratedmanagementWbs relationships")
            .satisfies(e -> assertThat(e.getPlanstrategy()).as("check planstrategy").isEqualTo(actual.getPlanstrategy()))
            .satisfies(
                e -> assertThat(e.getComprehensivecontrol()).as("check comprehensivecontrol").isEqualTo(actual.getComprehensivecontrol())
            )
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(
                e -> assertThat(e.getComprehensiveledger()).as("check comprehensiveledger").isEqualTo(actual.getComprehensiveledger())
            )
            .satisfies(e -> assertThat(e.getCycleplan()).as("check cycleplan").isEqualTo(actual.getCycleplan()))
            .satisfies(e -> assertThat(e.getAnnualplan()).as("check annualplan").isEqualTo(actual.getAnnualplan()))
            .satisfies(e -> assertThat(e.getMonthplan()).as("check monthplan").isEqualTo(actual.getMonthplan()))
            .satisfies(e -> assertThat(e.getPlanreturns()).as("check planreturns").isEqualTo(actual.getPlanreturns()))
            .satisfies(e -> assertThat(e.getPlanmonitor()).as("check planmonitor").isEqualTo(actual.getPlanmonitor()))
            .satisfies(e -> assertThat(e.getPlanexecute()).as("check planexecute").isEqualTo(actual.getPlanexecute()))
            .satisfies(e -> assertThat(e.getProjectcharge()).as("check projectcharge").isEqualTo(actual.getProjectcharge()));
    }
}
