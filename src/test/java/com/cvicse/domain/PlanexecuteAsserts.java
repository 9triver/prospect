package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanexecuteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanexecuteAllPropertiesEquals(Planexecute expected, Planexecute actual) {
        assertPlanexecuteAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanexecuteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanexecuteAllUpdatablePropertiesEquals(Planexecute expected, Planexecute actual) {
        assertPlanexecuteUpdatableFieldsEquals(expected, actual);
        assertPlanexecuteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanexecuteAutoGeneratedPropertiesEquals(Planexecute expected, Planexecute actual) {
        assertThat(expected)
            .as("Verify Planexecute auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanexecuteUpdatableFieldsEquals(Planexecute expected, Planexecute actual) {
        assertThat(expected)
            .as("Verify Planexecute relevant properties")
            .satisfies(e -> assertThat(e.getPlanname()).as("check planname").isEqualTo(actual.getPlanname()))
            .satisfies(e -> assertThat(e.getPlanstarttime()).as("check planstarttime").isEqualTo(actual.getPlanstarttime()))
            .satisfies(e -> assertThat(e.getPlanendtime()).as("check planendtime").isEqualTo(actual.getPlanendtime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanexecuteUpdatableRelationshipsEquals(Planexecute expected, Planexecute actual) {
        assertThat(expected)
            .as("Verify Planexecute relationships")
            .satisfies(e -> assertThat(e.getPlanreturns()).as("check planreturns").isEqualTo(actual.getPlanreturns()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()));
    }
}
