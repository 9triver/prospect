package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SecuritymanagementWbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecuritymanagementWbsAllPropertiesEquals(SecuritymanagementWbs expected, SecuritymanagementWbs actual) {
        assertSecuritymanagementWbsAutoGeneratedPropertiesEquals(expected, actual);
        assertSecuritymanagementWbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecuritymanagementWbsAllUpdatablePropertiesEquals(
        SecuritymanagementWbs expected,
        SecuritymanagementWbs actual
    ) {
        assertSecuritymanagementWbsUpdatableFieldsEquals(expected, actual);
        assertSecuritymanagementWbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecuritymanagementWbsAutoGeneratedPropertiesEquals(
        SecuritymanagementWbs expected,
        SecuritymanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify SecuritymanagementWbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecuritymanagementWbsUpdatableFieldsEquals(SecuritymanagementWbs expected, SecuritymanagementWbs actual) {
        assertThat(expected)
            .as("Verify SecuritymanagementWbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsspare1()).as("check wbsspare1").isEqualTo(actual.getWbsspare1()))
            .satisfies(e -> assertThat(e.getWbsspare2()).as("check wbsspare2").isEqualTo(actual.getWbsspare2()))
            .satisfies(e -> assertThat(e.getWbsspare3()).as("check wbsspare3").isEqualTo(actual.getWbsspare3()))
            .satisfies(e -> assertThat(e.getWbsspare4()).as("check wbsspare4").isEqualTo(actual.getWbsspare4()))
            .satisfies(e -> assertThat(e.getWbsspare5()).as("check wbsspare5").isEqualTo(actual.getWbsspare5()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecuritymanagementWbsUpdatableRelationshipsEquals(
        SecuritymanagementWbs expected,
        SecuritymanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify SecuritymanagementWbs relationships")
            .satisfies(e -> assertThat(e.getAnnualSecurityPlan()).as("check annualSecurityPlan").isEqualTo(actual.getAnnualSecurityPlan()))
            .satisfies(e -> assertThat(e.getSafetycheck()).as("check safetycheck").isEqualTo(actual.getSafetycheck()));
    }
}
