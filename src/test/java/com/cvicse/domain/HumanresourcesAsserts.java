package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HumanresourcesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHumanresourcesAllPropertiesEquals(Humanresources expected, Humanresources actual) {
        assertHumanresourcesAutoGeneratedPropertiesEquals(expected, actual);
        assertHumanresourcesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHumanresourcesAllUpdatablePropertiesEquals(Humanresources expected, Humanresources actual) {
        assertHumanresourcesUpdatableFieldsEquals(expected, actual);
        assertHumanresourcesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHumanresourcesAutoGeneratedPropertiesEquals(Humanresources expected, Humanresources actual) {
        assertThat(expected)
            .as("Verify Humanresources auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHumanresourcesUpdatableFieldsEquals(Humanresources expected, Humanresources actual) {
        assertThat(expected)
            .as("Verify Humanresources relevant properties")
            .satisfies(e -> assertThat(e.getHumanresourcesid()).as("check humanresourcesid").isEqualTo(actual.getHumanresourcesid()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getOutdeportment()).as("check outdeportment").isEqualTo(actual.getOutdeportment()))
            .satisfies(e -> assertThat(e.getIndeportment()).as("check indeportment").isEqualTo(actual.getIndeportment()))
            .satisfies(e -> assertThat(e.getAdjusttime()).as("check adjusttime").isEqualTo(actual.getAdjusttime()))
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getDeportment()).as("check deportment").isEqualTo(actual.getDeportment()))
            .satisfies(e -> assertThat(e.getProjectleader()).as("check projectleader").isEqualTo(actual.getProjectleader()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHumanresourcesUpdatableRelationshipsEquals(Humanresources expected, Humanresources actual) {
        assertThat(expected)
            .as("Verify Humanresources relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
