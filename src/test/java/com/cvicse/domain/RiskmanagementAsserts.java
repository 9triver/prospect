package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RiskmanagementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRiskmanagementAllPropertiesEquals(Riskmanagement expected, Riskmanagement actual) {
        assertRiskmanagementAutoGeneratedPropertiesEquals(expected, actual);
        assertRiskmanagementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRiskmanagementAllUpdatablePropertiesEquals(Riskmanagement expected, Riskmanagement actual) {
        assertRiskmanagementUpdatableFieldsEquals(expected, actual);
        assertRiskmanagementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRiskmanagementAutoGeneratedPropertiesEquals(Riskmanagement expected, Riskmanagement actual) {
        assertThat(expected)
            .as("Verify Riskmanagement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRiskmanagementUpdatableFieldsEquals(Riskmanagement expected, Riskmanagement actual) {
        assertThat(expected)
            .as("Verify Riskmanagement relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRiskmanagementUpdatableRelationshipsEquals(Riskmanagement expected, Riskmanagement actual) {
        assertThat(expected)
            .as("Verify Riskmanagement relationships")
            .satisfies(e -> assertThat(e.getWbs()).as("check wbs").isEqualTo(actual.getWbs()));
    }
}
