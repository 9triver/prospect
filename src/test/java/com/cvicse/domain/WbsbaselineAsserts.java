package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WbsbaselineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsbaselineAllPropertiesEquals(Wbsbaseline expected, Wbsbaseline actual) {
        assertWbsbaselineAutoGeneratedPropertiesEquals(expected, actual);
        assertWbsbaselineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsbaselineAllUpdatablePropertiesEquals(Wbsbaseline expected, Wbsbaseline actual) {
        assertWbsbaselineUpdatableFieldsEquals(expected, actual);
        assertWbsbaselineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsbaselineAutoGeneratedPropertiesEquals(Wbsbaseline expected, Wbsbaseline actual) {
        assertThat(expected)
            .as("Verify Wbsbaseline auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsbaselineUpdatableFieldsEquals(Wbsbaseline expected, Wbsbaseline actual) {
        assertThat(expected)
            .as("Verify Wbsbaseline relevant properties")
            .satisfies(e -> assertThat(e.getFormid()).as("check formid").isEqualTo(actual.getFormid()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getRequestdeportment()).as("check requestdeportment").isEqualTo(actual.getRequestdeportment()))
            .satisfies(e -> assertThat(e.getChargetype()).as("check chargetype").isEqualTo(actual.getChargetype()))
            .satisfies(e -> assertThat(e.getChargecontent()).as("check chargecontent").isEqualTo(actual.getChargecontent()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsbaselineUpdatableRelationshipsEquals(Wbsbaseline expected, Wbsbaseline actual) {
        assertThat(expected)
            .as("Verify Wbsbaseline relationships")
            .satisfies(e -> assertThat(e.getProjectcharge()).as("check projectcharge").isEqualTo(actual.getProjectcharge()));
    }
}
