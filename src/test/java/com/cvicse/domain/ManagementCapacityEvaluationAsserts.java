package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ManagementCapacityEvaluationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagementCapacityEvaluationAllPropertiesEquals(
        ManagementCapacityEvaluation expected,
        ManagementCapacityEvaluation actual
    ) {
        assertManagementCapacityEvaluationAutoGeneratedPropertiesEquals(expected, actual);
        assertManagementCapacityEvaluationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagementCapacityEvaluationAllUpdatablePropertiesEquals(
        ManagementCapacityEvaluation expected,
        ManagementCapacityEvaluation actual
    ) {
        assertManagementCapacityEvaluationUpdatableFieldsEquals(expected, actual);
        assertManagementCapacityEvaluationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagementCapacityEvaluationAutoGeneratedPropertiesEquals(
        ManagementCapacityEvaluation expected,
        ManagementCapacityEvaluation actual
    ) {
        assertThat(expected)
            .as("Verify ManagementCapacityEvaluation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagementCapacityEvaluationUpdatableFieldsEquals(
        ManagementCapacityEvaluation expected,
        ManagementCapacityEvaluation actual
    ) {
        assertThat(expected)
            .as("Verify ManagementCapacityEvaluation relevant properties")
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getDeprotment()).as("check deprotment").isEqualTo(actual.getDeprotment()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getTotalmark()).as("check totalmark").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalmark())
            )
            .satisfies(e -> assertThat(e.getMark()).as("check mark").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMark()))
            .satisfies(e -> assertThat(e.getRatingpersonname()).as("check ratingpersonname").isEqualTo(actual.getRatingpersonname()))
            .satisfies(e -> assertThat(e.getRatingdepartment()).as("check ratingdepartment").isEqualTo(actual.getRatingdepartment()))
            .satisfies(e -> assertThat(e.getRatingtimg()).as("check ratingtimg").isEqualTo(actual.getRatingtimg()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertManagementCapacityEvaluationUpdatableRelationshipsEquals(
        ManagementCapacityEvaluation expected,
        ManagementCapacityEvaluation actual
    ) {
        assertThat(expected)
            .as("Verify ManagementCapacityEvaluation relationships")
            .satisfies(e -> assertThat(e.getEvaluationCriteria()).as("check evaluationCriteria").isEqualTo(actual.getEvaluationCriteria()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getRatingperson()).as("check ratingperson").isEqualTo(actual.getRatingperson()));
    }
}
