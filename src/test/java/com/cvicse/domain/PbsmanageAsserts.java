package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PbsmanageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbsmanageAllPropertiesEquals(Pbsmanage expected, Pbsmanage actual) {
        assertPbsmanageAutoGeneratedPropertiesEquals(expected, actual);
        assertPbsmanageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbsmanageAllUpdatablePropertiesEquals(Pbsmanage expected, Pbsmanage actual) {
        assertPbsmanageUpdatableFieldsEquals(expected, actual);
        assertPbsmanageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbsmanageAutoGeneratedPropertiesEquals(Pbsmanage expected, Pbsmanage actual) {
        assertThat(expected)
            .as("Verify Pbsmanage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbsmanageUpdatableFieldsEquals(Pbsmanage expected, Pbsmanage actual) {
        assertThat(expected)
            .as("Verify Pbsmanage relevant properties")
            .satisfies(e -> assertThat(e.getPbsname()).as("check pbsname").isEqualTo(actual.getPbsname()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getAdministratorid()).as("check administratorid").isEqualTo(actual.getAdministratorid()))
            .satisfies(e -> assertThat(e.getAdministratorname()).as("check administratorname").isEqualTo(actual.getAdministratorname()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()))
            .satisfies(e -> assertThat(e.getAuditUserid()).as("check auditUserid").isEqualTo(actual.getAuditUserid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbsmanageUpdatableRelationshipsEquals(Pbsmanage expected, Pbsmanage actual) {
        assertThat(expected)
            .as("Verify Pbsmanage relationships")
            .satisfies(e -> assertThat(e.getPbssubmanage()).as("check pbssubmanage").isEqualTo(actual.getPbssubmanage()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
