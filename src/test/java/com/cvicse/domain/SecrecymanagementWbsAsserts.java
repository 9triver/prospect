package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SecrecymanagementWbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecrecymanagementWbsAllPropertiesEquals(SecrecymanagementWbs expected, SecrecymanagementWbs actual) {
        assertSecrecymanagementWbsAutoGeneratedPropertiesEquals(expected, actual);
        assertSecrecymanagementWbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecrecymanagementWbsAllUpdatablePropertiesEquals(SecrecymanagementWbs expected, SecrecymanagementWbs actual) {
        assertSecrecymanagementWbsUpdatableFieldsEquals(expected, actual);
        assertSecrecymanagementWbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecrecymanagementWbsAutoGeneratedPropertiesEquals(SecrecymanagementWbs expected, SecrecymanagementWbs actual) {
        assertThat(expected)
            .as("Verify SecrecymanagementWbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecrecymanagementWbsUpdatableFieldsEquals(SecrecymanagementWbs expected, SecrecymanagementWbs actual) {
        assertThat(expected)
            .as("Verify SecrecymanagementWbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsspare1()).as("check wbsspare1").isEqualTo(actual.getWbsspare1()))
            .satisfies(e -> assertThat(e.getWbsspare2()).as("check wbsspare2").isEqualTo(actual.getWbsspare2()))
            .satisfies(e -> assertThat(e.getWbsspare3()).as("check wbsspare3").isEqualTo(actual.getWbsspare3()))
            .satisfies(e -> assertThat(e.getWbsspare4()).as("check wbsspare4").isEqualTo(actual.getWbsspare4()))
            .satisfies(e -> assertThat(e.getWbsspare5()).as("check wbsspare5").isEqualTo(actual.getWbsspare5()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecrecymanagementWbsUpdatableRelationshipsEquals(SecrecymanagementWbs expected, SecrecymanagementWbs actual) {
        assertThat(expected)
            .as("Verify SecrecymanagementWbs relationships")
            .satisfies(e -> assertThat(e.getSecrecysystem()).as("check secrecysystem").isEqualTo(actual.getSecrecysystem()))
            .satisfies(e -> assertThat(e.getProjectSecrecy()).as("check projectSecrecy").isEqualTo(actual.getProjectSecrecy()));
    }
}
