package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectSecrecyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectSecrecyAllPropertiesEquals(ProjectSecrecy expected, ProjectSecrecy actual) {
        assertProjectSecrecyAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectSecrecyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectSecrecyAllUpdatablePropertiesEquals(ProjectSecrecy expected, ProjectSecrecy actual) {
        assertProjectSecrecyUpdatableFieldsEquals(expected, actual);
        assertProjectSecrecyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectSecrecyAutoGeneratedPropertiesEquals(ProjectSecrecy expected, ProjectSecrecy actual) {
        assertThat(expected)
            .as("Verify ProjectSecrecy auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectSecrecyUpdatableFieldsEquals(ProjectSecrecy expected, ProjectSecrecy actual) {
        assertThat(expected)
            .as("Verify ProjectSecrecy relevant properties")
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectSecrecyUpdatableRelationshipsEquals(ProjectSecrecy expected, ProjectSecrecy actual) {
        assertThat(expected)
            .as("Verify ProjectSecrecy relationships")
            .satisfies(e -> assertThat(e.getSecrecysystem()).as("check secrecysystem").isEqualTo(actual.getSecrecysystem()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectid()).as("check projectid").isEqualTo(actual.getProjectid()));
    }
}
