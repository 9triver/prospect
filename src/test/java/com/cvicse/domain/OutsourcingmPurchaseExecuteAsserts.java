package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OutsourcingmPurchaseExecuteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmPurchaseExecuteAllPropertiesEquals(
        OutsourcingmPurchaseExecute expected,
        OutsourcingmPurchaseExecute actual
    ) {
        assertOutsourcingmPurchaseExecuteAutoGeneratedPropertiesEquals(expected, actual);
        assertOutsourcingmPurchaseExecuteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmPurchaseExecuteAllUpdatablePropertiesEquals(
        OutsourcingmPurchaseExecute expected,
        OutsourcingmPurchaseExecute actual
    ) {
        assertOutsourcingmPurchaseExecuteUpdatableFieldsEquals(expected, actual);
        assertOutsourcingmPurchaseExecuteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmPurchaseExecuteAutoGeneratedPropertiesEquals(
        OutsourcingmPurchaseExecute expected,
        OutsourcingmPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmPurchaseExecute auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmPurchaseExecuteUpdatableFieldsEquals(
        OutsourcingmPurchaseExecute expected,
        OutsourcingmPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmPurchaseExecute relevant properties")
            .satisfies(
                e -> assertThat(e.getOutsourcingexecuteid()).as("check outsourcingexecuteid").isEqualTo(actual.getOutsourcingexecuteid())
            )
            .satisfies(e -> assertThat(e.getMatarialname()).as("check matarialname").isEqualTo(actual.getMatarialname()))
            .satisfies(e -> assertThat(e.getPurchasingmethod()).as("check purchasingmethod").isEqualTo(actual.getPurchasingmethod()))
            .satisfies(e -> assertThat(e.getBudgit()).as("check budgit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudgit()))
            .satisfies(e -> assertThat(e.getNeedtime()).as("check needtime").isEqualTo(actual.getNeedtime()))
            .satisfies(e -> assertThat(e.getPlanusetime()).as("check planusetime").isEqualTo(actual.getPlanusetime()))
            .satisfies(e -> assertThat(e.getSupplierid()).as("check supplierid").isEqualTo(actual.getSupplierid()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmPurchaseExecuteUpdatableRelationshipsEquals(
        OutsourcingmPurchaseExecute expected,
        OutsourcingmPurchaseExecute actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmPurchaseExecute relationships")
            .satisfies(e -> assertThat(e.getOutsourcingplanid()).as("check outsourcingplanid").isEqualTo(actual.getOutsourcingplanid()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()));
    }
}
