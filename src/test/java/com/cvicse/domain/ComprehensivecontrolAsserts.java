package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ComprehensivecontrolAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComprehensivecontrolAllPropertiesEquals(Comprehensivecontrol expected, Comprehensivecontrol actual) {
        assertComprehensivecontrolAutoGeneratedPropertiesEquals(expected, actual);
        assertComprehensivecontrolAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComprehensivecontrolAllUpdatablePropertiesEquals(Comprehensivecontrol expected, Comprehensivecontrol actual) {
        assertComprehensivecontrolUpdatableFieldsEquals(expected, actual);
        assertComprehensivecontrolUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComprehensivecontrolAutoGeneratedPropertiesEquals(Comprehensivecontrol expected, Comprehensivecontrol actual) {
        assertThat(expected)
            .as("Verify Comprehensivecontrol auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComprehensivecontrolUpdatableFieldsEquals(Comprehensivecontrol expected, Comprehensivecontrol actual) {
        assertThat(expected)
            .as("Verify Comprehensivecontrol relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getActualstarttime()).as("check actualstarttime").isEqualTo(actual.getActualstarttime()))
            .satisfies(e -> assertThat(e.getActualendtime()).as("check actualendtime").isEqualTo(actual.getActualendtime()))
            .satisfies(e -> assertThat(e.getResult()).as("check result").isEqualTo(actual.getResult()))
            .satisfies(e -> assertThat(e.getAcceptancetype()).as("check acceptancetype").isEqualTo(actual.getAcceptancetype()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComprehensivecontrolUpdatableRelationshipsEquals(Comprehensivecontrol expected, Comprehensivecontrol actual) {
        assertThat(expected)
            .as("Verify Comprehensivecontrol relationships")
            .satisfies(e -> assertThat(e.getProgress()).as("check progress").isEqualTo(actual.getProgress()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getFunds()).as("check funds").isEqualTo(actual.getFunds()))
            .satisfies(e -> assertThat(e.getTotalbudget()).as("check totalbudget").isEqualTo(actual.getTotalbudget()))
            .satisfies(e -> assertThat(e.getUnitbudget()).as("check unitbudget").isEqualTo(actual.getUnitbudget()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getDecument()).as("check decument").isEqualTo(actual.getDecument()))
            .satisfies(
                e ->
                    assertThat(e.getCoordinationdepartment())
                        .as("check coordinationdepartment")
                        .isEqualTo(actual.getCoordinationdepartment())
            );
    }
}
