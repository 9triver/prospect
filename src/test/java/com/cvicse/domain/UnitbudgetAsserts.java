package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UnitbudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitbudgetAllPropertiesEquals(Unitbudget expected, Unitbudget actual) {
        assertUnitbudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertUnitbudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitbudgetAllUpdatablePropertiesEquals(Unitbudget expected, Unitbudget actual) {
        assertUnitbudgetUpdatableFieldsEquals(expected, actual);
        assertUnitbudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitbudgetAutoGeneratedPropertiesEquals(Unitbudget expected, Unitbudget actual) {
        assertThat(expected)
            .as("Verify Unitbudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitbudgetUpdatableFieldsEquals(Unitbudget expected, Unitbudget actual) {
        assertThat(expected)
            .as("Verify Unitbudget relevant properties")
            .satisfies(e -> assertThat(e.getUnitbudgetid()).as("check unitbudgetid").isEqualTo(actual.getUnitbudgetid()))
            .satisfies(e -> assertThat(e.getSubprojectname()).as("check subprojectname").isEqualTo(actual.getSubprojectname()))
            .satisfies(e -> assertThat(e.getUnitbudgername()).as("check unitbudgername").isEqualTo(actual.getUnitbudgername()))
            .satisfies(e -> assertThat(e.getBillingunit()).as("check billingunit").isEqualTo(actual.getBillingunit()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getNumber()))
            .satisfies(
                e ->
                    assertThat(e.getTotalbudget())
                        .as("check totalbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalbudget())
            )
            .satisfies(
                e ->
                    assertThat(e.getMaintainerbudget())
                        .as("check maintainerbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMaintainerbudget())
            )
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingbudget())
                        .as("check outsourcingbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOutsourcingbudget())
            )
            .satisfies(
                e ->
                    assertThat(e.getEarmarkedbudget())
                        .as("check earmarkedbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEarmarkedbudget())
            )
            .satisfies(
                e ->
                    assertThat(e.getTestbudget())
                        .as("check testbudget")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTestbudget())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitbudgetUpdatableRelationshipsEquals(Unitbudget expected, Unitbudget actual) {
        assertThat(expected)
            .as("Verify Unitbudget relationships")
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
