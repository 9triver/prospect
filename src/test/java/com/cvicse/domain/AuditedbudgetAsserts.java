package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AuditedbudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditedbudgetAllPropertiesEquals(Auditedbudget expected, Auditedbudget actual) {
        assertAuditedbudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertAuditedbudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditedbudgetAllUpdatablePropertiesEquals(Auditedbudget expected, Auditedbudget actual) {
        assertAuditedbudgetUpdatableFieldsEquals(expected, actual);
        assertAuditedbudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditedbudgetAutoGeneratedPropertiesEquals(Auditedbudget expected, Auditedbudget actual) {
        assertThat(expected)
            .as("Verify Auditedbudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditedbudgetUpdatableFieldsEquals(Auditedbudget expected, Auditedbudget actual) {
        assertThat(expected)
            .as("Verify Auditedbudget relevant properties")
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getCreatorname()).as("check creatorname").isEqualTo(actual.getCreatorname()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getBudgit()).as("check budgit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudgit()))
            .satisfies(e -> assertThat(e.getDapartmentid()).as("check dapartmentid").isEqualTo(actual.getDapartmentid()))
            .satisfies(e -> assertThat(e.getDraftapproval()).as("check draftapproval").isEqualTo(actual.getDraftapproval()))
            .satisfies(
                e ->
                    assertThat(e.getTotalbudgetid())
                        .as("check totalbudgetid")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalbudgetid())
            )
            .satisfies(
                e ->
                    assertThat(e.getUnitbudgetid())
                        .as("check unitbudgetid")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUnitbudgetid())
            )
            .satisfies(e -> assertThat(e.getDocumentid()).as("check documentid").isEqualTo(actual.getDocumentid()))
            .satisfies(e -> assertThat(e.getMaintainerid()).as("check maintainerid").isEqualTo(actual.getMaintainerid()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditedbudgetUpdatableRelationshipsEquals(Auditedbudget expected, Auditedbudget actual) {
        assertThat(expected)
            .as("Verify Auditedbudget relationships")
            .satisfies(e -> assertThat(e.getTotalbudget()).as("check totalbudget").isEqualTo(actual.getTotalbudget()))
            .satisfies(e -> assertThat(e.getUnitbudget()).as("check unitbudget").isEqualTo(actual.getUnitbudget()))
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
