package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgressmanagementWbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressmanagementWbsAllPropertiesEquals(ProgressmanagementWbs expected, ProgressmanagementWbs actual) {
        assertProgressmanagementWbsAutoGeneratedPropertiesEquals(expected, actual);
        assertProgressmanagementWbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressmanagementWbsAllUpdatablePropertiesEquals(
        ProgressmanagementWbs expected,
        ProgressmanagementWbs actual
    ) {
        assertProgressmanagementWbsUpdatableFieldsEquals(expected, actual);
        assertProgressmanagementWbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressmanagementWbsAutoGeneratedPropertiesEquals(
        ProgressmanagementWbs expected,
        ProgressmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify ProgressmanagementWbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressmanagementWbsUpdatableFieldsEquals(ProgressmanagementWbs expected, ProgressmanagementWbs actual) {
        assertThat(expected)
            .as("Verify ProgressmanagementWbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsspare1()).as("check wbsspare1").isEqualTo(actual.getWbsspare1()))
            .satisfies(e -> assertThat(e.getWbsspare2()).as("check wbsspare2").isEqualTo(actual.getWbsspare2()))
            .satisfies(e -> assertThat(e.getWbsspare3()).as("check wbsspare3").isEqualTo(actual.getWbsspare3()))
            .satisfies(e -> assertThat(e.getWbsspare4()).as("check wbsspare4").isEqualTo(actual.getWbsspare4()))
            .satisfies(e -> assertThat(e.getWbsspare5()).as("check wbsspare5").isEqualTo(actual.getWbsspare5()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgressmanagementWbsUpdatableRelationshipsEquals(
        ProgressmanagementWbs expected,
        ProgressmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify ProgressmanagementWbs relationships")
            .satisfies(e -> assertThat(e.getProgressplan()).as("check progressplan").isEqualTo(actual.getProgressplan()))
            .satisfies(
                e -> assertThat(e.getProgressplanreturns()).as("check progressplanreturns").isEqualTo(actual.getProgressplanreturns())
            )
            .satisfies(e -> assertThat(e.getProgressbaseline()).as("check progressbaseline").isEqualTo(actual.getProgressbaseline()));
    }
}
