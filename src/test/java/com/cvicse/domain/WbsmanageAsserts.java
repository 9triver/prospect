package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WbsmanageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsmanageAllPropertiesEquals(Wbsmanage expected, Wbsmanage actual) {
        assertWbsmanageAutoGeneratedPropertiesEquals(expected, actual);
        assertWbsmanageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsmanageAllUpdatablePropertiesEquals(Wbsmanage expected, Wbsmanage actual) {
        assertWbsmanageUpdatableFieldsEquals(expected, actual);
        assertWbsmanageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsmanageAutoGeneratedPropertiesEquals(Wbsmanage expected, Wbsmanage actual) {
        assertThat(expected)
            .as("Verify Wbsmanage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsmanageUpdatableFieldsEquals(Wbsmanage expected, Wbsmanage actual) {
        assertThat(expected)
            .as("Verify Wbsmanage relevant properties")
            .satisfies(e -> assertThat(e.getWbsname()).as("check wbsname").isEqualTo(actual.getWbsname()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getResult()).as("check result").isEqualTo(actual.getResult()))
            .satisfies(e -> assertThat(e.getAdministratorname()).as("check administratorname").isEqualTo(actual.getAdministratorname()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWbsmanageUpdatableRelationshipsEquals(Wbsmanage expected, Wbsmanage actual) {
        assertThat(expected)
            .as("Verify Wbsmanage relationships")
            .satisfies(e -> assertThat(e.getWbssubmanage()).as("check wbssubmanage").isEqualTo(actual.getWbssubmanage()))
            .satisfies(e -> assertThat(e.getPbssubmanage()).as("check pbssubmanage").isEqualTo(actual.getPbssubmanage()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getAdministratorid()).as("check administratorid").isEqualTo(actual.getAdministratorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()));
    }
}
