package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TechnicalConditionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAllPropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertTechnicalConditionAutoGeneratedPropertiesEquals(expected, actual);
        assertTechnicalConditionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAllUpdatablePropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertTechnicalConditionUpdatableFieldsEquals(expected, actual);
        assertTechnicalConditionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionAutoGeneratedPropertiesEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionUpdatableFieldsEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition relevant properties")
            .satisfies(e -> assertThat(e.getCaption()).as("check caption").isEqualTo(actual.getCaption()))
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getDecumentid()).as("check decumentid").isEqualTo(actual.getDecumentid()))
            .satisfies(e -> assertThat(e.getClaimant()).as("check claimant").isEqualTo(actual.getClaimant()))
            .satisfies(e -> assertThat(e.getApplicant()).as("check applicant").isEqualTo(actual.getApplicant()))
            .satisfies(e -> assertThat(e.getApplicanttime()).as("check applicanttime").isEqualTo(actual.getApplicanttime()))
            .satisfies(e -> assertThat(e.getValidrange()).as("check validrange").isEqualTo(actual.getValidrange()))
            .satisfies(e -> assertThat(e.getCreatetime()).as("check createtime").isEqualTo(actual.getCreatetime()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTechnicalConditionUpdatableRelationshipsEquals(TechnicalCondition expected, TechnicalCondition actual) {
        assertThat(expected)
            .as("Verify TechnicalCondition relationships")
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
