package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PbssubmanageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbssubmanageAllPropertiesEquals(Pbssubmanage expected, Pbssubmanage actual) {
        assertPbssubmanageAutoGeneratedPropertiesEquals(expected, actual);
        assertPbssubmanageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbssubmanageAllUpdatablePropertiesEquals(Pbssubmanage expected, Pbssubmanage actual) {
        assertPbssubmanageUpdatableFieldsEquals(expected, actual);
        assertPbssubmanageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbssubmanageAutoGeneratedPropertiesEquals(Pbssubmanage expected, Pbssubmanage actual) {
        assertThat(expected)
            .as("Verify Pbssubmanage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbssubmanageUpdatableFieldsEquals(Pbssubmanage expected, Pbssubmanage actual) {
        assertThat(expected)
            .as("Verify Pbssubmanage relevant properties")
            .satisfies(e -> assertThat(e.getPbssubname()).as("check pbssubname").isEqualTo(actual.getPbssubname()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(
                e -> assertThat(e.getResponsibledepartment()).as("check responsibledepartment").isEqualTo(actual.getResponsibledepartment())
            )
            .satisfies(e -> assertThat(e.getRelevantdepartment()).as("check relevantdepartment").isEqualTo(actual.getRelevantdepartment()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPbssubmanageUpdatableRelationshipsEquals(Pbssubmanage expected, Pbssubmanage actual) {
        assertThat(expected)
            .as("Verify Pbssubmanage relationships")
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
