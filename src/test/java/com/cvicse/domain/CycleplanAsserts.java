package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CycleplanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCycleplanAllPropertiesEquals(Cycleplan expected, Cycleplan actual) {
        assertCycleplanAutoGeneratedPropertiesEquals(expected, actual);
        assertCycleplanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCycleplanAllUpdatablePropertiesEquals(Cycleplan expected, Cycleplan actual) {
        assertCycleplanUpdatableFieldsEquals(expected, actual);
        assertCycleplanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCycleplanAutoGeneratedPropertiesEquals(Cycleplan expected, Cycleplan actual) {
        assertThat(expected)
            .as("Verify Cycleplan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCycleplanUpdatableFieldsEquals(Cycleplan expected, Cycleplan actual) {
        assertThat(expected)
            .as("Verify Cycleplan relevant properties")
            .satisfies(e -> assertThat(e.getCycleplanname()).as("check cycleplanname").isEqualTo(actual.getCycleplanname()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getStarttime()).as("check starttime").isEqualTo(actual.getStarttime()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()))
            .satisfies(e -> assertThat(e.getActualstarttime()).as("check actualstarttime").isEqualTo(actual.getActualstarttime()))
            .satisfies(e -> assertThat(e.getActualendtime()).as("check actualendtime").isEqualTo(actual.getActualendtime()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCycleplanUpdatableRelationshipsEquals(Cycleplan expected, Cycleplan actual) {
        assertThat(expected)
            .as("Verify Cycleplan relationships")
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(e -> assertThat(e.getAnnualplan()).as("check annualplan").isEqualTo(actual.getAnnualplan()))
            .satisfies(e -> assertThat(e.getMonthplan()).as("check monthplan").isEqualTo(actual.getMonthplan()))
            .satisfies(e -> assertThat(e.getProjectcharge()).as("check projectcharge").isEqualTo(actual.getProjectcharge()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
