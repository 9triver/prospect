package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResourcemanagementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourcemanagementAllPropertiesEquals(Resourcemanagement expected, Resourcemanagement actual) {
        assertResourcemanagementAutoGeneratedPropertiesEquals(expected, actual);
        assertResourcemanagementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourcemanagementAllUpdatablePropertiesEquals(Resourcemanagement expected, Resourcemanagement actual) {
        assertResourcemanagementUpdatableFieldsEquals(expected, actual);
        assertResourcemanagementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourcemanagementAutoGeneratedPropertiesEquals(Resourcemanagement expected, Resourcemanagement actual) {
        assertThat(expected)
            .as("Verify Resourcemanagement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourcemanagementUpdatableFieldsEquals(Resourcemanagement expected, Resourcemanagement actual) {
        assertThat(expected)
            .as("Verify Resourcemanagement relevant properties")
            .satisfies(e -> assertThat(e.getResourceid()).as("check resourceid").isEqualTo(actual.getResourceid()))
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getClientname()).as("check clientname").isEqualTo(actual.getClientname()))
            .satisfies(e -> assertThat(e.getPlandate()).as("check plandate").isEqualTo(actual.getPlandate()))
            .satisfies(e -> assertThat(e.getCreatorname()).as("check creatorname").isEqualTo(actual.getCreatorname()))
            .satisfies(e -> assertThat(e.getSecretlevel()).as("check secretlevel").isEqualTo(actual.getSecretlevel()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourcemanagementUpdatableRelationshipsEquals(Resourcemanagement expected, Resourcemanagement actual) {
        assertThat(expected)
            .as("Verify Resourcemanagement relationships")
            .satisfies(e -> assertThat(e.getCreatorid()).as("check creatorid").isEqualTo(actual.getCreatorid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()));
    }
}
