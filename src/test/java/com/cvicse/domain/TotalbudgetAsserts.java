package com.cvicse.domain;

import static com.cvicse.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TotalbudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTotalbudgetAllPropertiesEquals(Totalbudget expected, Totalbudget actual) {
        assertTotalbudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertTotalbudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTotalbudgetAllUpdatablePropertiesEquals(Totalbudget expected, Totalbudget actual) {
        assertTotalbudgetUpdatableFieldsEquals(expected, actual);
        assertTotalbudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTotalbudgetAutoGeneratedPropertiesEquals(Totalbudget expected, Totalbudget actual) {
        assertThat(expected)
            .as("Verify Totalbudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTotalbudgetUpdatableFieldsEquals(Totalbudget expected, Totalbudget actual) {
        assertThat(expected)
            .as("Verify Totalbudget relevant properties")
            .satisfies(e -> assertThat(e.getTotalbudgetid()).as("check totalbudgetid").isEqualTo(actual.getTotalbudgetid()))
            .satisfies(e -> assertThat(e.getValuationsubjects()).as("check valuationsubjects").isEqualTo(actual.getValuationsubjects()))
            .satisfies(e -> assertThat(e.getBudget()).as("check budget").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudget()))
            .satisfies(
                e ->
                    assertThat(e.getPercentage())
                        .as("check percentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPercentage())
            )
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTotalbudgetUpdatableRelationshipsEquals(Totalbudget expected, Totalbudget actual) {}
}
