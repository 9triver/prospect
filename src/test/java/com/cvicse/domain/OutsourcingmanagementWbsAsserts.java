package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OutsourcingmanagementWbsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmanagementWbsAllPropertiesEquals(
        OutsourcingmanagementWbs expected,
        OutsourcingmanagementWbs actual
    ) {
        assertOutsourcingmanagementWbsAutoGeneratedPropertiesEquals(expected, actual);
        assertOutsourcingmanagementWbsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmanagementWbsAllUpdatablePropertiesEquals(
        OutsourcingmanagementWbs expected,
        OutsourcingmanagementWbs actual
    ) {
        assertOutsourcingmanagementWbsUpdatableFieldsEquals(expected, actual);
        assertOutsourcingmanagementWbsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmanagementWbsAutoGeneratedPropertiesEquals(
        OutsourcingmanagementWbs expected,
        OutsourcingmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmanagementWbs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmanagementWbsUpdatableFieldsEquals(
        OutsourcingmanagementWbs expected,
        OutsourcingmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmanagementWbs relevant properties")
            .satisfies(e -> assertThat(e.getWbsspare1()).as("check wbsspare1").isEqualTo(actual.getWbsspare1()))
            .satisfies(e -> assertThat(e.getWbsspare2()).as("check wbsspare2").isEqualTo(actual.getWbsspare2()))
            .satisfies(e -> assertThat(e.getWbsspare3()).as("check wbsspare3").isEqualTo(actual.getWbsspare3()))
            .satisfies(e -> assertThat(e.getWbsspare4()).as("check wbsspare4").isEqualTo(actual.getWbsspare4()))
            .satisfies(e -> assertThat(e.getWbsspare5()).as("check wbsspare5").isEqualTo(actual.getWbsspare5()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOutsourcingmanagementWbsUpdatableRelationshipsEquals(
        OutsourcingmanagementWbs expected,
        OutsourcingmanagementWbs actual
    ) {
        assertThat(expected)
            .as("Verify OutsourcingmanagementWbs relationships")
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingPurchasePlan())
                        .as("check outsourcingPurchasePlan")
                        .isEqualTo(actual.getOutsourcingPurchasePlan())
            )
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingPurchaseExecute())
                        .as("check outsourcingPurchaseExecute")
                        .isEqualTo(actual.getOutsourcingPurchaseExecute())
            );
    }
}
