package com.cvicse.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAllPropertiesEquals(Project expected, Project actual) {
        assertProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAllUpdatablePropertiesEquals(Project expected, Project actual) {
        assertProjectUpdatableFieldsEquals(expected, actual);
        assertProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAutoGeneratedPropertiesEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectUpdatableFieldsEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project relevant properties")
            .satisfies(e -> assertThat(e.getProjectid()).as("check projectid").isEqualTo(actual.getProjectid()))
            .satisfies(e -> assertThat(e.getProjectname()).as("check projectname").isEqualTo(actual.getProjectname()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getProjecttype()).as("check projecttype").isEqualTo(actual.getProjecttype()))
            .satisfies(e -> assertThat(e.getResponsiblename()).as("check responsiblename").isEqualTo(actual.getResponsiblename()))
            .satisfies(e -> assertThat(e.getDuedate()).as("check duedate").isEqualTo(actual.getDuedate()))
            .satisfies(e -> assertThat(e.getPriorty()).as("check priorty").isEqualTo(actual.getPriorty()))
            .satisfies(e -> assertThat(e.getProgressid()).as("check progressid").isEqualTo(actual.getProgressid()))
            .satisfies(e -> assertThat(e.getReturnsid()).as("check returnsid").isEqualTo(actual.getReturnsid()))
            .satisfies(e -> assertThat(e.getQualityid()).as("check qualityid").isEqualTo(actual.getQualityid()))
            .satisfies(e -> assertThat(e.getFundsid()).as("check fundsid").isEqualTo(actual.getFundsid()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAuditStatus()).as("check auditStatus").isEqualTo(actual.getAuditStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectUpdatableRelationshipsEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project relationships")
            .satisfies(e -> assertThat(e.getCycleplan()).as("check cycleplan").isEqualTo(actual.getCycleplan()))
            .satisfies(e -> assertThat(e.getProgressmanagement()).as("check progressmanagement").isEqualTo(actual.getProgressmanagement()))
            .satisfies(e -> assertThat(e.getQualitymanagement()).as("check qualitymanagement").isEqualTo(actual.getQualitymanagement()))
            .satisfies(e -> assertThat(e.getFundsmanagement()).as("check fundsmanagement").isEqualTo(actual.getFundsmanagement()))
            .satisfies(e -> assertThat(e.getTechnicalCondition()).as("check technicalCondition").isEqualTo(actual.getTechnicalCondition()))
            .satisfies(e -> assertThat(e.getContractualfunds()).as("check contractualfunds").isEqualTo(actual.getContractualfunds()))
            .satisfies(
                e ->
                    assertThat(e.getOutsourcingmPurchaseExecute())
                        .as("check outsourcingmPurchaseExecute")
                        .isEqualTo(actual.getOutsourcingmPurchaseExecute())
            )
            .satisfies(e -> assertThat(e.getResourcemanagement()).as("check resourcemanagement").isEqualTo(actual.getResourcemanagement()))
            .satisfies(e -> assertThat(e.getRiskmanagement()).as("check riskmanagement").isEqualTo(actual.getRiskmanagement()))
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(e -> assertThat(e.getSafetycheck()).as("check safetycheck").isEqualTo(actual.getSafetycheck()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getEvaluationCriteria()).as("check evaluationCriteria").isEqualTo(actual.getEvaluationCriteria()))
            .satisfies(e -> assertThat(e.getResponsibleid()).as("check responsibleid").isEqualTo(actual.getResponsibleid()))
            .satisfies(e -> assertThat(e.getAuditorid()).as("check auditorid").isEqualTo(actual.getAuditorid()))
            .satisfies(e -> assertThat(e.getProjectSecrecy()).as("check projectSecrecy").isEqualTo(actual.getProjectSecrecy()));
    }
}
